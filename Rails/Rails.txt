**** Rails (Version 7.1.1) ****

Installation of Rails in Linux : 
a) Before Installation of rails, your system has the proper prerequisites installed.
    a.1) Ruby
    a.2) SQLite3
b) Open the terminal window.
c) Check ruby version; type the following command :
    ruby --version
d) Check sqlite3 version; type the following command :
    sqlite3 --version
e) Now install rails, use the gem install command provided by RubyGems :
    gem install rails
f) Check if it is properly installed or not by checking its version :
    rails --version
g) If it says something about its version then you are ready to continue with rails.

1. Rails : Rails is a web application development framework written in the Ruby programming    language. It is designed to make programming web applications easier by making assumptions about what every developer needs to get started. It allows you to write less code while accomplishing more than many other languages and frameworks. Experienced Rails developers also report that it makes web application development more fun.
-> Two major principles of Rails :
    a) DRY (Don't Repeat Yourself) : RY is a principle of software development which states that "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system". By not writing the same information over and over again, our code is more maintainable, more extensible, and less buggy.
    b)  Rails has opinions about the best way to do many things in a web application, and defaults to this set of conventions, rather than require that you specify minutiae through endless configuration files.

2. Creation of new project : Type the command :
    Syntax : rails new <application-name>

3. Start Web Server : Type the command inside the <application-name> directory.
    Syntax : bin/rails server
    This will display a default web server of Rails on (http://localhost:3000).
    To stop the web server press Ctrl+c in terminal.

4. MVC : Like most other frameworks, Rails is also based on MVC pattern. Requests first come to the controller, controller finds an appropriate view and interacts with model which in turn interacts with database and send response to controller. Then controller gives the output to the view based on the response.
    a) Model : The models are classes in Rails. They interact with database, store data, handles validation, transaction, etc.
    Syntax : bin/rails generate model <model-name> <column:data-type>
    b) View : View represent data in a particular format in an application for the users. It handles HTML, CSS, JavaScript and XML in an application. They do what controller tells them. 
    c) Controller : Controller directs traffic to views and models. It query models for data from the database and display the desired result with the help of view in an application.
    Syntax : bin/rails generate controller <controller-name> <action-name> [--skip-routes]
 
5. Migrations : Rails Migration allows you to use Ruby to define changes to your database schema, making it possible to use a version control system to keep things synchronized with the actual code.
    Syntax : bin/rails db:migrate

6. bin/rails console : This command is used to interact with console in Rails.

7. <object-name>=<Model-name>.new(...) : To initialize a new object of model.

8. <object-name>.save : The object is not saved to the database at all. It's only available in the console at the moment. To save the object to the database, we must call save.

9. <Model-name>.find(id) : When we want to fetch the particular data from the database, we can call find on the model and pass the id as an argument.

10. <Model-name>.all : When we want to fetch all the data from the database, we can call all on the model.

11 <% %> / <%= %> : The <% %> tag means "evaluate the enclosed Ruby code." The <%= %> tag means "evaluate the enclosed Ruby code, and output the value it returns." 

12. Resourceful Routing : Whenever we have such a combination of routes, controller actions, and views that work together to perform CRUD operations on an entity, we call that entity a resource. Rails provides a routes method named resources that maps all of the conventional routes for a collection of resources, such as articles. 

13. bin/rails routes :  It inspect what routes are mapped.

14. Active Record : Active Record is the M in MVC - the model - which is the layer of the system responsible for representing business data and logic.
    a) Naming Conventions : 
    -> Model Class - Singular with the first letter of each word capitalized (e.g., BookClub).
    -> Database Table - Plural with underscores separating words (e.g., book_clubs).

    b) Schema Conventions : 
    -> Foreign keys - These fields should be named following the pattern singularized_table_name_id (e.g., item_id, order_id). These are the fields that Active Record will look for when you create associations between your models.
    -> Primary keys - By default, Active Record will use an integer column named id as the table's primary key (bigint for PostgreSQL and MySQL, integer for SQLite). When using Active Record Migrations to create your tables, this column will be automatically created.

15. Role "username" does not exist error :
    sudo -i -u postgres
    psql postgres
    postgres=# CREATE ROLE username superuser;
    postgres=# ALTER ROLE username WITH LOGIN;

16. Adding new column to existing table : bin/rails generate migration add_columnName_to_tablename columnName:string

17. Rename table name : bin/rails generate migration RenameTableName

18. bin/rails db:rollback : To revert the changes in database.

19. CRUD Operations on Model through active records : 
    CREATE operation :
    a) create : This method will create the object and save it to the database.
    Syntax : obj=Model.create(...)
    b) new : An object can be instantiated without being saved . To save we should type (obj.save) in rails console.
    Syntax : obj=Model.new
             obj.name=""
    c) block : This will instantiated a block without being saved in database. To save in database we should use (obj.save).

    READ operation :
    a) all method : Return a collection with all users.
    Syntax : obj=Model.all
    
    b) first method : Return the first user.
    Syntax : obj=Model.first

    c) find_by : To find the data with some condition.
    Syntax : user=User.find_by(name:"David")

    d) where : To perform some query operation on data.
    Syntax : users = User.where(name: 'David', occupation: 'Code Artist').order(created_at: :desc)

    UPDATE operation : Once an Active Record object has been retrieved, its attributes can be modified and it can be saved to the database.
    a) find_by : To find the data from the table and update it.
    Syntax : obj=Model.find_by(...)
            obj.name="..."
            obj.save
    b) update : To update with shorthand method.
    Syntax : obj=Model.find_by(...)
            obj.update(column_name:value)
    c) update_all : To update all the data at once.
    Syntax : Model.update_all column_name:value 

    DELETE operation : 
    a) destroy : To delete a record from the table.
    Syntax : obj=Model.find_by(...)
            obj.destroy
    
    b) destroy_all : To delete all records from the table.
    Syntax : obj=Model.find_by(...)
            obj.destroy_all

20. Validations : Active Record allows you to validate the state of a model before it gets written into the database. Methods like save, create and update validate a model before persisting it to the database. When a model is invalid these methods return false and no database operations are performed. All of these methods have a bang counterpart (that is, save!, create! and update!), which are stricter in that they raise an ActiveRecord::RecordInvalid exception when validation fails.

21. Callbacks : Active Record callbacks allow you to attach code to certain events in the life-cycle of your models. This enables you to add behavior to your models by transparently executing code when those events occur, like when you create a new record, update it, destroy it, and so on.

22. Associations : Active Record associations allow you to define relationships between models. Associations can be used to describe one-to-one, one-to-many, and many-to-many relationships. For example, a relationship like “Author has many Books”.

23. Migrations : Migrations are a convenient way to alter your database schema over time in a consistent way. They use a Ruby DSL so that you don't have to write SQL by hand, allowing your schema and changes to be database independent.
    a) Irreversible process : If you wish for a migration to do something that Active Record doesn't know how to reverse, you can use reversible.
    Command : rails generate migration <action-name>

    b) bin/rails db:migrate:status : This command will display a list of all the migrations along with their respective statuses and version numbers. 

    c) rails db:rollback STEP=1 : STEP=1 specifies the number of migration versions to roll back.

    d) rails db:migrate:down VERSION=<migration-id> : This command will roll back the database to the state it was in before the specified migration was applied.

    e) rails db:migrate:up VERSION=<migration-id> : This command will migrate the changes of file in the database. 

    f) Delete local migrate files : To delete a file from local directory first we should down the migrate files and then delete the file. Otherwise, schema.rb stores that moigration change in it and it whenever other user migrate the files it will automatically create the file in his system.

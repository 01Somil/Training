Ruby is a dynamic, open source, object oriented and reflective programming language. It is fully object oriented programming language. Everything is an object in Ruby.

** Installation of RVM **
1. Open your linux terminal and use the following commands.
    a) gpg2 --keyserver keyserver.ubuntu.com --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
    b) \curl -sSL https://get.rvm.io | bash -s stable
    c) \curl -sSL https://get.rvm.io | bash -s stable --rails
2. RVM installed.
3. Use 'rvm list' to list all the versions of ruby in your system.
4. Use 'rvm use <version-name>' to switch the version of ruby.
5. Use 'rvm install' to install the versions of ruby.

** Installation of Ruby in Ubuntu **

1. Open the terminal and use the following command :
    sudo apt install ruby-full  
2. If the terminal asks for the password, type it and press enter.
3. If asks for additional disk space [yes/no] press y and hit enter.
4. After installation, check ruby version through ruby -v.
5. Installation is completed.

** Creation of file and run ruby file **

1. Create a ruby file with .rb extension. 
2. Run the file through this command :
    ruby <file-name>.rb

** RUBY Operators **

Ruby has a built-in modern set of operators. Operators are a symbol which is used to perform different operations. For example, +, -, /, *, etc.

    Types of operators :
    a) Unary operator : Unary operators expect a single operand to run on.
    Example : !-> Boolean Not , ~ -> Bitwise Complement , + -> Unary Plus.

    b) Arithmetic operator : Arithmetic operators take numerical values as operands and return them in a single value.
    Example : +,-,/,*,** ,%
        b.1) Addition : Adds values on either side of the operator.
        Example : 
            3.2.2 :010 > a=10
            => 10 
            3.2.2 :011 > b=20
            => 20 
            3.2.2 :012 > a+b
            => 30 
        b.2) Substraction : Subtracts right hand operand from left hand operand.
        Example :
            3.2.2 :013 > a=20
            => 20 
            3.2.2 :014 > b=10
            => 10 
            3.2.2 :015 > a-b
            => 10 
        b.3) Multiplication : Multiplies values on either side of the operator.
        Example :
            3.2.2 :017 > a=20
            => 20 
            3.2.2 :018 > b=30
            => 30 
            3.2.2 :019 > puts a*b
            => 600
        b.4) Division : Divides left hand operand by right hand operand.
        Example :
            3.2.2 :020 > a=20
            => 20 
            3.2.2 :021 > b=10
            => 10 
            3.2.2 :022 > a/b
            => 2 
        b.5) Modulus : Divides left hand operand by right hand operand and returns remainder.
        Example :
            3.2.2 :023 > a=5
            => 5 
            3.2.2 :024 > b=4
            => 4 
            3.2.2 :025 > a%b
            => 1 
        b.6) Exponent : Performs exponential (power) calculation on operators.
        Example : 
            3.2.2 :026 > a=2
            => 2 
            3.2.2 :027 > b=5
            => 5 
            3.2.2 :028 > a**b
            => 32 

    c) Bitwise operator : Bitwise operators work on bits operands.
    Example : & , | , << ,>> ,^, ~

        c.1) & operator : Binary AND Operator copies a bit to the result if it exists in both operands.
        Example : 
            3.2.2 :029 > a=10
            => 10 
            3.2.2 :030 > b=15
            => 15 
            3.2.2 :031 > a&b
            => 10 
        c.2) | operator : Binary OR Operator copies a bit if it exists in either operand.
        Example : 
            3.2.2 :032 > a|b
            => 15 
        c.3) ^ operator: Binary XOR Operator copies the bit if it is set in one operand but not both.
        Example :
            3.2.2 :033 > a^b
            => 5 
        c.4) ~ operator : 	Binary Ones Complement Operator is unary and has the effect of 'flipping' bits.
        Example :
            3.2.2 :035 > ~a
             => -11 
        c.5) << operator : Binary Left Shift Operator. The left operands value is moved left by  the number of bits specified by the right operand.
        Example :
            3.2.2 :036 > a<<2
            => 40 
        c.6) >> operator : Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.
        Example :
            3.2.2 :037 > a>>2
             => 2 

    d) Logical operator : Logical operators work on bits operands.
    Example : &&, || 
        d.1) && / AND operator : Called Logical AND operator. If both the operands are true, then the condition becomes true.
        Example :
            3.2.2 :044 > a=30
            => 30 
            3.2.2 :045 > b=40
            => 40 
            3.2.2 :046 > a==30 && b==40
            => true 
        d.2) || / OR operator : Called Logical OR Operator. If any of the two operands are non zero, then the condition becomes true.
        Example :
            3.2.2 :047 > a==30 || b==50
            => true 
        d.3) ! / not operator : Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then Logical NOT operator will make false.
        Example :
            3.2.2 :048 > !a==30
            => false
        
    e) Ternary operator : Ternary operators first check whether given conditions are true or false, then execute the condition.
    Example : ?: (Conditional Expression)
        3.2.2 :049 > a=20
        => 20 
        3.2.2 :050 > b=40
        => 40 
        3.2.2 :051 > a==20?'Value of a is 20':'Value of a is not 20'
        => "Value of a is 20" 

    f) Assignment operator : Assignment operator assign a value to the operands.
    Example : =, +=, -= , *= , /= , %= , **=

    g) Comparison operator : Comparison operators compare two operands.
    Example : == , ===, != ,> ,<, >=, <= , <=> , .eql? , equal? 

    <=> : Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.

    .eql? : True if the receiver and argument have both the same type and equal values.
    1 == 1.0 returns true, but 1.eql?(1.0) is false.

    equal? : True if the receiver and argument have the same object id.
    if aObj is duplicate of bObj then aObj == bObj is true, a.equal?bObj is false but a.equal?aObj is true.

        g.1) == operator : Checks if the value of two operands are equal or not, if yes then condition becomes true.
        Example :
            3.2.2 :052 > a=50
            => 50 
            3.2.2 :053 > b=100
            => 100 
            3.2.2 :054 > a==b
            => false  
        g.2) != operator : Checks if the value of two operands are equal or not, if values are not equal then condition becomes true.
        Example :
            3.2.2 :061 > a!=b
             => true 
        g.3) > operator : Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.
        Example :
            3.2.2 :062 > a>b
            => false 
        g.4) < operator : Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.
        Example :
            3.2.2 :063 > a<b
            => true 
        g.5) >= operator : Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.
        Example :
            3.2.2 :064 > a>=b
             => false 
        g.6) <= operator : Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.
        Example :
            3.2.2 :065 > a<=b
            => true 
        g.7) <=> operator : Combined comparison operator. Returns 0 if first operand equals second, 1 if first operand is greater than the second and -1 if first operand is less than the second.
        Example : 
            3.2.2 :066 > a<=>b
            => -1 
        g.8) === operator : Used to test equality within a when clause of a case statement.
        Example : 
            3.2.2 :067 > a===b
            => false 
        g.9) .eql? operator : True if the receiver and argument have both the same type and equal values.
        Example :
            3.2.2 :068 > a.eql?b
            => false 
        g.10) equal? : True if the receiver and argument have the same object id.
        Example :
            3.2.2 :069 > a.equal?b
             => false 

    h) Range operator : Comparison operators compare two operands.
    Example : .. -> Range is inclusive of the last term
              ... -> Range is exclusive of the last term

** RUBY Variables **

Ruby variables are locations which hold data to be used in the programs. 
    
    There are four types of variables in Ruby:
    a) Local variables : A local variable name starts with a lowercase letter or underscore (_). It is only accessible or have its scope within the block of its initialization. Once the code block completes, variable has no scope.

    b) Class variables : A class variable name starts with @@ sign. They need to be initialized before use. A class variable belongs to the whole class and can be accessible from anywhere inside the class. If the value will be changed at one instance, it will be changed at every instance.

    c) Instance variables : An instance variable name starts with a @ sign. It belongs to one instance of the class and can be accessed from any instance of the class within a method. They only have limited access to a particular instance of a class.
    They don't need to be initialize. An uninitialized instance variable will have a nil value.
    
    d) Global variables : A global variable name starts with a $ sign. Its scope is globally, means it can be accessed from any where in a program.
    An uninitialized global variable will have a nil value.

** Ruby Data Types **

Data types represents a type of data such as text, string, numbers, etc. There are different data types in Ruby:

    a) Numbers
    b) Strings
    c) Symbols
    d) Hashes
    e) Arrays
    f) Booleans

** Ruby Control Statements **

1. If-Else Statements : The Ruby if else statement is used to test condition. There are various types of if statement in Ruby.

    a) if statement : 
        Syntax: if <condition>
                    --code--
                end
        Example :
            3.0.0 :020 > if b>a
            3.0.0 :021 >   puts "Value of b is greater"
            3.0.0 :022 > end
            Value of b is greater
            => nil 

    b) if-else statement : 
        Syntax : if(condition)  
                //code if condition is true  
                else  
                //code if condition is false  
                end  
        Example :
            3.0.0 :013 > a=10
            => 10 
            3.0.0 :014 > b=20
            => 20 
            3.0.0 :015 > if a>b
            3.0.0 :016 >   puts "a is greater than b"
            3.0.0 :017 > else
            3.0.0 :018 >   puts "b is greater than a"
            3.0.0 :019 > end
            b is greater than a
            => nil 

    c) if-else-if (elsif) statement :
        Syntax : if(condition1)  
                //code to be executed if condition1is true  
                elsif (condition2)  
                //code to be executed if condition2 is true  
                else (condition3)  
                //code to be executed if condition3 is true  
                end  
        Example :
            3.0.0 :004 > if a==b
            3.0.0 :005 >   puts "Value of a and b are equal"
            3.0.0 :006 > elsif a>b
            3.0.0 :007 >   puts "Value of a is greater than b"
            3.0.0 :008 > else
            3.0.0 :009 >   puts "Value of b is greater than a"
            3.0.0 :010 > end
            Value of a is greater than b
            => nil 
    
    d) ternay (shortened if statement) statement :
        Syntax : test-expression ? if-true-expression : if-false-expression  
        Example :
            3.0.0 :011 > a>b ? "a is greater than b" : "a is smaller than b"
             => "a is greater than b" 
    
2. Case Statements : The case statement matches one statement with multiple conditions just like a switch statement in other languages.
    Syntax : case <expression>
            when <expression1>
                code...
            ....
            else
                code...
            end
    Example :
        3.0.0 :013 > case num
        3.0.0 :014 > when 1
        3.0.0 :015 >   puts "Number is #{num}"
        3.0.0 :016 > when 2
        3.0.0 :017 >   puts "Number is #{num}"
        3.0.0 :018 > when 3
        3.0.0 :019 >   puts "Number is #{num}"
        3.0.0 :020 > else
        3.0.0 :021 >   puts "Unknown number"
        3.0.0 :022 > end
        Number is 3
        => nil 

3. For Loop : Ruby for loop iterates over a specific range of numbers. Hence, for loop is used if a program has fixed number of iterations.

    Syntax : for <variable> in <expression> do
                code
             end
    Example :
        3.0.0 :023 > for i in 0..5 do
        3.0.0 :024 >     puts i
        3.0.0 :025 > end
        0
        1
        2
        3
        4
        5
        => 0..5 

4. While loop :  While loop is used to iterate a program several times. If the number of iterations is not fixed for a program, while loop is used.
    Syntax : while <condition>
                code
             end
    Example :
        3.0.0 :026 > i=5
        => 5 
        3.0.0 :027 > while i>=0
        3.0.0 :028 >   puts i
        3.0.0 :029 >   i-=1
        3.0.0 :030 > end
        5
        4
        3
        2
        1
        0
        => nil 

5. Do-while loop : Do while loop iterates a part of program several times. It is quite similar to a while loop with the only difference that loop will execute at least once.
    Syntax : loop do 
                --code--
             if <expression>
                break
             end 
    Example :
        3.0.0 :031 > num=4
        => 4 
        3.0.0 :032 > loop do
        3.0.0 :033 >   puts num
        3.0.0 :034 >   num+=1
        3.0.0 :035 >   if num==6
        3.0.0 :036 >     break
        3.0.0 :037 >   end
        3.0.0 :038 > end
        4
        5
        => nil 
            
6. Until Loop : The Ruby until loop runs until the given condition evaluates to true. It exits the loop when condition becomes true. It is just opposite of the while loop which runs until the given condition evaluates to false.           
    Syntax : until <condition>
             --code--
             end
    Example :
        3.0.0 :044 > until num==10
        3.0.0 :045?>   puts num
        3.0.0 :046?>   num+=1
        3.0.0 :047 > end
        6
        7
        8
        9
        => nil 

7. Break statement : The Ruby break statement is used to terminate a loop.
    Example :
        3.0.0 :031 > num=4
        => 4 
        3.0.0 :032 > loop do
        3.0.0 :033 >   puts num
        3.0.0 :034 >   num+=1
        3.0.0 :035 >   if num==6
        3.0.0 :036 >     break
        3.0.0 :037 >   end
        3.0.0 :038 > end
        4
        5
        => nil 

8. Next Statement : The Ruby next statement is used to skip loop's next iteration. 
    Example :
        3.0.0 :048 > for i in 0..5 do
        3.0.0 :049 >     if i==3
        3.0.0 :050 >       next
        3.0.0 :051 >     end
        3.0.0 :052 >     puts i
        3.0.0 :053 > end
        0
        1
        2
        4
        5
        => 0..5 

9. Comments : Ruby comments are non executable lines in a program. 
    a) Single line comment : It is defined by '#' character.
    b) Multi-Line comment : It is used to comments multiple lines at once.
        Syntax :
        =begin
            --code--
        =end

10. Redo Statement : It is used to repeat the current iteration of the loop. The redo statement is executed without evaluating the loop's condition.
The redo statement is used inside a loop.
    Example :
        3.0.0 :085 > for i in 0...5 do
        3.0.0 :086 >     if i==4
        3.0.0 :087 >       i+=1
        3.0.0 :088 >       redo
        3.0.0 :089 >     end
        3.0.0 :090 >     puts i
        3.0.0 :091 > end
        0
        1
        2
        3
        5
        => 0...5 

11. Retry Statement : Ruby retry statement is used to repeat the whole loop iteration from the start. The retry statement is used inside a loop.

** Ruby Core **

1. Ruby Objects : Objects in Ruby are created by calling new method of the class. It is a unique type of method and predefined in the Ruby library.
Ruby objects are instances of the class.
    Syntax : <object-name>=<class-name>.new
    Example :
        3.0.0 :005 > class Shape
        3.0.0 :006 >   def fun
        3.0.0 :007 >     puts "This is function of shape class"
        3.0.0 :008 >   end
        3.0.0 :009 > end
        => :fun 
        3.0.0 :010 > shape=Shape.new
        => #<Shape:0x00005574efdf1560> 
        3.0.0 :011 > puts shape.fun
        This is function of shape class

        => nil 

2. Ruby Classes : Each Ruby class is an instance of class Class. Classes in Ruby are first-class objects.
    Syntax : class <class-name>
                --code--
             end
    Example :
        3.0.0 :005 > class Shape
        3.0.0 :006 >   def fun
        3.0.0 :007 >     puts "This is function of shape class"
        3.0.0 :008 >   end
        3.0.0 :009 > end
        => :fun 
        3.0.0 :010 > shape=Shape.new
        => #<Shape:0x00005574efdf1560> 
        3.0.0 :011 > puts shape.fun
        This is function of shape class

        => nil 

3. Methods : It prevent us from writing the same code in a program again and again. It is a set of expression that returns a value.
    Syntax : def <method-name>
                --code--
             end
    Example :
        3.0.0 :001 > def add_numbers
        3.0.0 :002 >   return 2
        3.0.0 :003 > end
        => :add_numbers 
        3.0.0 :004 > puts add_numbers
        2
        => nil 

    Methods Withs parameter :
    Syntax : def <method-name>(parameters)
                --code--
             end
    Example :
        3.0.0 :001 > def two_numbers(a,b)
        3.0.0 :002 >   return a+b
        3.0.0 :003 > end
        => :two_numbers 
        3.0.0 :004 > puts two_numbers(3,4)
        7
        => nil 

4. Blocks : Ruby code blocks are called closures in other programming languages. It consist of a group of codes which is always enclosed with braces or written between do..end. 
    A block is written in two ways,

    a) Multi-line between do and end (multi-line blocks are niot inline) : 
        Example : [10,20,30].each do |n|
                    puts n
                  end
    b) Inline between braces {} : 
        Example : [10, 20, 30].each {|n| puts n}  
    
    c) The yield statement is used to call a block within a method with a value.
        Syntax : def <method-name>
                    --code--
                    yield
                 end
                <method-name> {-- code --}
    
    d) Passing parameters with yield.
        Syntax : def <method-name>
                    yield <parameter>
                    --code--
                 end
                <method-name> {|i| --code--}
    
    e) BEGIN and END block : It is used to declare that file is being loaded and file has been loaded respectively.
        Syntax : BEGIN{
            --code--
        }
        END{
            --code--
        }
        --code--
    
    f) Ampersand block : The &block is a way to pass a reference (instead of a local variable) to the block to a method.
        Syntax : def <method-name>(&b)
                    --code--
                    b.call
                 end
                <method-name> {--code--}

5. Modules : Ruby module is a collection of methods and constants. A module method may be instance method or module method. Module name should start with a capital letter.
    Syntax :
    module <Module-name>
        --code--
    end

    Modules basically serve two purposes:

    a) They act as namespace. They prevent the name clashes.
    b) They allow the mixin facility to share functionality between classes.

    Mixins : Ruby doesn't support multiple inheritance. Modules eliminate the need of multiple inheritance using mixin in Ruby.When you include a module within a class, the class will have access to the methods of the module.

6. Strings : Ruby string object holds and manipulates an arbitary sequence of bytes, typically representing characters. They are created using String::new or as literals.

    a) Quotes : Ruby string literals are enclosed within single and double quotes.
        Example : puts "some message"
    b) Accessing string elements : With the help of [] brackets. -1 index is for last character.
    c) Multiline string : Strings can be written in multiple lines.
        c.1) String can be written within double quotes.
        c.2) The % character is used and string is enclosed within / character.
        c.3) In heredoc syntax, we use << and string is enclosed within word STRING.
    d) Variable Interpolation : It is replacing variables with values inside string literals.
        Example : str="John"
                  puts "Hello ,#{str}"
    e) Concatenate Strings : To join more than one strings.
        There are four ways to concatenate Ruby strings into single string:
        e.1) Using plus sign in between strings.
        e.2) Using a single space in between strings.
        e.3) Using << sign in between strings.
        e.4) Using concat method in between strings.
    f) Freezing : In Ruby, by default strings are not immutable. To make them immutable, freeze method can be used. Immutable is defined as an existing string can't be modified, only a new string can be created out of them.
        Syntax : string-name.freeze
    g) Comparing Strings : Strings can be compared with three operators.
        g.1) With == operator : Returns true or false
        g.2) With eql? Operator : Returns true or false
        g.3) With casecmp method : Returns 0 if matched or 1 if not matched
    
    Methods of String Class :

    6.1) ::new : Returns a new String that is a copy of string.
    Example :
        3.0.0 :002 > str=String.new
        => "" 
        3.0.0 :003 > str
        => "" 
        3.0.0 :004 > str="This is new method"
        => "This is new method" 
    With initialization:
        3.0.0 :005 > str=String.new('Foo')
        => "Foo" 
        3.0.0 :006 > str
        => "Foo" 
    
    6.2) ::try_convert : Try to convert obj into a String, using to_str method. Returns converted string or nil if obj cannot be converted for any reason.
    Example :
        3.0.0 :012 > String.try_convert(str)
        => "Foo" 
    
    6.3) * : Returns a new String containing integer copies of self.
    Example :
        3.0.0 :022"> str="hello "
        => "hello " 
        3.0.0 :023 > str * 3
        => "hello hello hello " 
    
    6.4) % : Returns the result of formatting object into the format specification
    Example :
        3.0.0 :036 > a=123
        => 123 
        3.0.0 :037 > "%04d" % a
        => "0123" 
    
    6.5) + : string + other_string → new_string
    Example :
        3.0.0 :040 > a
        => "0123" 
        3.0.0 :041 > a + "hello"
        => "0123hello" 

    6.6) << : Concatenate two or more strings.
    Example :
        3.0.0 :056 > a << "John"
        => "HiiJohn" 
    6.7) <=> : Compare two strings.
    1 if other_string is larger.
    0 if the two are equal.
    1 if other_string is smaller.
    nil if the two are incomparable.
    Example :
        3.0.0 :061 > a<=>'hello'
        => -1 

    6.8) == : Returns true if object has the same length and content, false otherwise.
    Example :
        3.0.0 :063 > a
        => "Hello" 
        3.0.0 :064 > a=="Hello"
        => true 
        3.0.0 :065 > a=="hello"
        => false 

    6.9) === : Returns true if object has the same length and content, false otherwise.
    Example :   
        3.0.0 :072 > a=1
        => 1 
        3.0.0 :073 > a==="1"
        => false 

    6.10) string =~ regexp : Returns the Integer index of the first substring that matches the given regexp, or nil if no match found:
    Example :
        3.0.0 :074 > a="Hello"
        => "Hello" 
        3.0.0 :075 > a =~ /l/
        => 2 
        3.0.0 :076 > a =~ /a/
        => nil 

    6.11) [] : Returns the substring of given string specified by arguments.
        string[index] → new_string or nil
        string[start, length] → new_string or nil
        string[range] → new_string or nil
        string[regexp, capture = 0] → new_string or nil
        string[substring] → new_string or nil

        Example :
            3.0.0 :079 > str="hello"
            => "hello" 
            3.0.0 :082 > str[0]
            => "h" 
            3.0.0 :083 > str[0,2]
            => "he" 
            3.0.0 :084 > str[1..3]
            => "ell" 
        
    6.12) ascii_only? : Returns true if string contains ASCII characters only false otherwise.
    Example :
        3.0.0 :088 > str
        => "hho" 
        3.0.0 :089 > str.ascii_only?
        => true 
    
    6.13) b : Returns a copy of self that has ASCII-8BIT encoding; the underlying bytes are not modified:
    Example :
        3.0.0 :090"> str="Hello"
        => "Hello" 
        3.0.0 :091 > t=str.b
        => "Hello" 
        3.0.0 :092 > t
        => "Hello"
    
    6.14) byteindex : Returns the Integer byte-based index of the first occurrence of the given substring, or nil if none found.
    Example :
        3.2.2 :001 > str="Hello"
        => "Hello" 
        3.2.2 :002 > str.byteindex('e')
        => 1 
    With offset; example :
        3.2.2 :003 > str.byteindex('l',3)
        => 3 
    
    6.15) byterindex : Returns the Integer byte-based index of the last occurrence of the given substring, or nil if none found:
    Example :
        3.2.2 :006 > str = "Hello"
        => "Hello" 
        3.2.2 :007 > str.byterindex('l')
        => 3 
    With offset example :
        3.2.2 :010 > str.byterindex('l',2)
         => 2 
        
    6.16) bytes : Returns an array of the bytes in self.
    Example :
        3.2.2 :017 > str.bytes
         => [72, 101, 108, 108, 111]  
    6.17) bytesize : Returns the count of bytes (not characters) in self.
    Example :
        3.2.2 :018 > str.bytesize
        => 5 
    6.18) byteslice (index,length=1) : Returns the substring.
    Example :
        3.2.2 :006 > str = "Hello"
        => "Hello" 
        3.2.2 :019 > str.byteslice(2)
        => "l" 
        3.2.2 :020 > str.byteslice(2,3)
        => "llo" 

    6.19) bytesplice(index, length, str) → string
          bytesplice(range, str) → string
        Replaces some of the content and gives a new string.
    Example :
        3.2.2 :024 > str="Hello"
        => "Hello" 
        3.2.2 :025 > str.bytesplice(1,4,"ii")
        => "Hii" 

    6.20) Capitalize : Returns a string containing the characters in self; the first character is upcased; the remaining characters are downcased.
    Example :
        3.2.2 :030 > str="hELLO"
        => "hELLO" 
        3.2.2 :031 > str.capitalize
        => "Hello"  
    
    6.21) Capitalize! : Upcases the first character in self; downcases the remaining characters; returns self if any changes were made, nil otherwise.
    Example :
        3.2.2 :032 > str
        => "hELLO" 
        3.2.2 :033 > str.capitalize!
        => "Hello" 
    
    6.22) casecmp : Compares self.downcase and other_string.downcase
        -1 if other_string.downcase is larger.
        0 if the two are equal.
        1 if other_string.downcase is smaller.
        nil if the two are incomparable.
    Example : 
        3.0.0 :001 > str="Hello"
        => "Hello" 
        3.0.0 :002 > str.casecmp("hello")
        => 0 
    
    6.23) casecmp? : Returns true if self and other_string are equal after Unicode case folding, otherwise false
    Example :
        3.0.0 :003 > str.casecmp?("hello")
        => true 

    6.24) center(size, pad_string = ' ') : Returns a centered copy of self.
    Example :
        3.0.0 :004 > str
        => "Hello" 
        3.0.0 :005 > str.center(10,'*')
        => "**Hello***" 

    6.25) chars : Returns an array of the characters in self.
    Example :
        3.0.0 :006 > str.chars
        => ["H", "e", "l", "l", "o"] 

    6.26) chomp : Returns a new string copied from self, with trailing characters possibly removed. When line_sep is "\n", removes the last one or two characters if they are "\r", "\n", or "\r\n" (but not "\n\r"):
    Example :
        3.0.0 :010 > str="hello\n\n"
        => "hello\n\n" 
        3.0.0 :011 > str.chomp
        => "hello\n" 
    Another Example :
        3.0.0 :013 > str="hello"
        => "hello" 
        3.0.0 :014 > str.chomp('o')
        => "hell" 

    6.27) chomp!(line_sep = $/) : Like String#chomp, but modifies self in place; returns nil if no modification made, self otherwise.
    Example :
        3.0.0 :015 > str
        => "hello" 
        3.0.0 :016 > str.chomp!('o')
        => "hell" 
        3.0.0 :017 > str
        => "hell" 

    6.28) chop : Returns a new string copied from self, with trailing characters possibly removed.Removes "\r\n" if those are the last two characters.
    Example :
        3.0.0 :018 > str="hello\r\n"
        => "hello\r\n" 
        3.0.0 :019 > str.chop
        => "hello" 
    Otherwise removes the last character if it exists.
        3.0.0 :022 > str
        => "hello" 
        3.0.0 :023 > str.chop
        => "hell" 
    
    6.29) chop! : It modifies self in place; returns nil if self is empty, self otherwise.
    Example :
        3.0.0 :024 > str
        => "hello" 
        3.0.0 :025 > str.chop!
        => "hell" 

    6.30) chr : Returns a string containing the first character of self
    Example :
        3.0.0 :026 > str.chr
         => "h" 

    6.31) clear : Removes the contents of self.
    Example : 
        3.0.0 :027 > str.clear
        => "" 

    6.32) codepoints : Returns an array of the codepoints in self; each codepoint is the integer value for a character.
    Example :
        3.0.0 :029 > str="hello"
        => "hello" 
        3.0.0 :030 > str.codepoints
        => [104, 101, 108, 108, 111] 

    6.33) concat : Concatenates each object in objects to self and returns self.
    Example :
        3.0.0 :031 > str.concat(' Welcome',' here');
        => "hello Welcome here" 

    6.34) count(*selectors) : Returns the total number of characters in self that are specified by the given selectors
    Example :
        3.0.0 :033 > str="hello"
        => "hello" 
        3.0.0 :034 > str.count('lo')
        => 3  

    6.35) delete(*selectors) : Returns a copy of self with characters specified by selectors removed.
    Example :
        3.0.0 :042 > str
        => "hello" 
        3.0.0 :043 > str.delete('lo')
        => "he" 

    6.36) delete!(*selectors) : It modifies self in place. Returns self if any changes were made, nil otherwise.
    Example :
        3.0.0 :044 > str.delete!('lo')
        => "he" 
    
    6.37) delete_prefix (prefix) : Returns a copy of self with leading substring prefix removed
    Example :
        3.0.0 :048 > str.delete_prefix('he')
        => "llo" 

    6.38) delete_prefix!(prefix) : Returns self if the prefix is removed, nil otherwise.

    6.39) delete_suffix (suffix) : Returns a copy of self with trailing substring suffix removed
    Example :
        3.0.0 :049 > str
        => "hello" 
        3.0.0 :050 > str.delete_suffix('llo')
        => "he" 
    
    6.40) delete_suffix!(suffix) : Returns self if the suffix is removed, nil otherwise.
    Example :
        3.0.0 :051 > str.delete_suffix!('llo')
        => "he" 

    6.41) downcase(*options) : Returns a string containing the downcased characters in self.
    Example :
        3.0.0 :053 > str="HeLLo"
        => "HeLLo" 
        3.0.0 :054 > str.downcase
        => "hello" 

    6.42) downcase! : Modify original string.
    Example :
        3.0.0 :055 > str
        => "HeLLo" 
        3.0.0 :056 > str.downcase!
        => "hello" 

    6.43) dump : Returns a printable version of self, enclosed in double-quotes, with special characters escaped, and with non-printing characters replaced by hexadecimal notation.
    Example :
        3.0.0 :057 > str="hello\n "
        => "hello\n " 
        3.0.0 :058 > str.dump
        => "\"hello\\n \"" 

    6.44) each_byte {|byte| ...} : Calls the given block with each successive byte from self; returns self.
    Example :
        3.0.0 :061 > str.each_byte {|byte| print byte , ' '}
        104 101 108 108 111  => "hello" 

    6.45) each_char : Calls the given block with each successive character from self; returns self.
    Example :
        3.0.0 :062 > str.each_char {|c| print c,' '}
        h e l l o  => "hello" 

    6.46) each_codepoint : Calls the given block with each successive codepoint from self; each codepoint is the integer value for a character; returns self.
    Example :
        3.0.0 :063 > str.each_codepoint{|c| print c,' '}
        104 101 108 108 111  => "hello" 

    6.47) empty? : Returns true if the length of self is zero, false otherwise.
    Example : 
        3.0.0 :065 > str.empty?
        => false

    6.48) encoding : Returns the Encoding object that represents the encoding of obj.
    Example :
        3.0.0 :070 > str.encoding
         => #<Encoding:UTF-8> 
        
    6.49) end_with?(*strings) : Returns whether self ends with any of the given strings
    Example :
        3.0.0 :072 > str.end_with?('ello')
         => false 

    6.50) eql? : Returns true if object has the same length and content; as self; false otherwise.
    Example :
        3.0.0 :073 > str="hello"
        => "hello" 
        3.0.0 :074 > str.eql?("Hello")
        => false 
    
    6.51) force_encoding (encoding) : Changes the encoding of self to encoding, which may be a string encoding name or an Encoding object; returns self.
    Example : 
        3.0.0 :075 > str.force_encoding('ascii')
        => "hello" 
        3.0.0 :076 > str.encoding
        => #<Encoding:US-ASCII> 

    6.52) freeze : To make the string immutable.
    Example :
        3.0.0 :080 > str.freeze
        => "hello" 
        3.0.0 :081 > str[0]='l'
        Traceback (most recent call last):
                5: from /home/beryl/.rvm/rubies/ruby-3.0.0/bin/irb:23:in `<main>'
                4: from /home/beryl/.rvm/rubies/ruby-3.0.0/bin/irb:23:in `load'
                3: from /home/beryl/.rvm/rubies/ruby-3.0.0/lib/ruby/gems/3.0.0/gems/irb-1.3.0/exe/irb:11:in `<top (required)>'
                1: from (irb):81:in `[]='

    6.53) getbyte(index) : Returns the byte at zero-based index as an integer, or nil if index is out of range
    Example :
        3.0.0 :003 > str="Hello"
        => "Hello" 
        3.0.0 :004 > str.getbyte(1)
        => 101 
    
    6.54) hash : Returns the integer hash value for self. The value is based on the length, content and encoding of self
    Example :
        3.0.0 :006 > str.hash
        => -902046462397498627 
    
    6.55) hex : Interprets the leading substring of self as a string of hexadecimal digits (with an optional sign and an optional 0x) and returns the corresponding number; returns zero if there is no such leading substring
    Example :
        3.0.0 :007 > str.hex
         => 0 

    6.56) include? : Returns true if self contains other_string, false otherwise.
    Example :
        3.0.0 :008 > str.include?('o')
        => true 

    6.57) index (substring, offset = 0) : Returns the integer index of the first match for the given argument, or nil if none found; the search of self is forward, and begins at position offset (in characters).
    Example :
        3.0.0 :001 > str="hello"
        => "hello" 
        3.0.0 :002 > str.index('l')
        => 2 
    
    6.58) initialize_copy(other_string) : Replaces the contents of self with the contents of other_string
    Example :
        3.0.0 :004 > str.replace('Hii')
        => "Hii" 
    
    6.59) insert (index,other_string) : Inserts the given other_string into self; returns self.
    Example :
        3.0.0 :005 > str
        => "Hii" 
        3.0.0 :006 > str.insert(2," Hello")
        => "Hi Helloi" 

    6.60) inspect : Returns a printable version of self, enclosed in double-quotes, and with special characters escaped.
    Example :
        3.0.0 :007 > str.inspect
        => "\"Hi Helloi\"" 

    6.61) intern : Returns the Symbol corresponding to str, creating the symbol if it did not previously exist.
    Example :
        3.0.0 :008 > str.intern
        => :"Hi Helloi" 
        3.0.0 :009 > "Welcome".intern   # Welcome symbol not exist previously
        => :Welcome 

    6.62) length : Returns the count of characters (not bytes) in self.
    Example :
        3.0.0 :010 > str.length
        => 9 

    6.63) ljust(size,pad_string=' ') : Returns a left-justified copy of self.
    Example : 
        3.0.0 :012 > str="hello"
        => "hello" 
        3.0.0 :013 > str.ljust(10)
        => "hello     " 

    6.64) lstrip : Returns a copy of self with leading whitespace removed.
    Example :
        3.0.0 :015 > str="\n\r\nhello"
        => "\n\r\nhello" 
        3.0.0 :016 > str.lstrip
        => "hello"

    6.65) lstrip! : Any modifications are made in self; returns self if any modification are made, nil otherwise.
    Example :
        3.0.0 :017 > str.lstrip!
        => "hello"
    
    6.66) next : Returns the successor to self. The successor is calculated by incrementing characters.
    Example :
        3.0.0 :019 > str
        => "hello" 
        3.0.0 :020 > str.succ
        => "hellp" 

    6.67) next! : It modifies self in place; returns self.
    Example :
        3.0.0 :021 > str.succ!
        => "hellp" 
        3.0.0 :022 > str
        => "hellp" 

    6.68) oct : Interprets the leading substring of self as a string of octal digits (with an optional sign) and returns the corresponding number; returns zero if there is no such leading substring.
    Example : 
        3.0.0 :024 > '123'.oct
        => 83 

    6.69) ord : Returns the integer ordinal of the first character of self.
    Example :
        3.0.0 :025 > str.ord
        => 104 
    
    6.70) partition(string_or_regexp) → [head, match, tail] 
    Example: 
        3.0.0 :026 > str.partition('l')
        => ["he", "l", "lp"]
    
    6.71) prepend (*other_string) : Prepends each string in other_strings to self and returns self.
    Example :
        3.0.0 :028 > str="hello"
        => "hello" 
        3.0.0 :029 > str.prepend("Welcome ","John ")
        => "Welcome John hello" 

    6.72) replace(other_string) : Replaces the contents of self with the contents of other_string.
    Example :
        3.0.0 :030 > str
        => "Welcome John hello" 
        3.0.0 :031 > str.replace("hello")
        => "hello" 
    
    6.73) reverse : Returns a new string with the characters from self in reverse order.
    Example :
        3.0.0 :032 > str
        => "hello" 
        3.0.0 :033 > str.reverse
        => "olleh" 

    6.74) reverse! : Returns self with its characters reversed.
    Example :
        3.0.0 :034 > str
        => "hello" 
        3.0.0 :035 > str.reverse!
        => "olleh" 

    6.75) rjust (size,pad_string=' ') : Returns a right-justified copy of self.
    Example :
        3.0.0 :036 > str
        => "olleh" 
        3.0.0 :037 > str.rjust(10)
        => "     olleh" 
    
    6.76) rpartition(sep) → [head, match, tail] 
    Example :
        3.0.0 :039 > str="hello"
        => "hello" 
        3.0.0 :040 > str.rpartition('l')
        => ["hel", "l", "o"] 

    6.77) rstrip : Returns a copy of the receiver with trailing whitespace removed.
    Example :
        3.0.0 :043 > str="hello\n\v\r"
        => "hello\n\v\r" 
        3.0.0 :044 > str.rstrip
        => "hello" 
    
    6.78) rstrip! : Returs self and same functionality as rstrip.

    6.79) scan (string or regex) : Matches a pattern against self.
    Example :
        3.0.0 :001 > str="fun is fun"
        => "fun is fun" 
        3.0.0 :002 > str.scan("fun")
        => ["fun", "fun"] 

    6.80) setbyte(index,integer) : Sets the byte at zero-based index to integer; returns integer.
    Example : 
        3.0.0 :005 > str.setbyte(0,98)
        => 98 
        3.0.0 :006 > str
        => "bun is fun" 

    6.81) size : Returns the count of characters (not bytes) in self.
    Example :
        3.0.0 :007 > str.size
        => 10 

    6.82) slice (*args) : Returns the substring of self specified by the arguments. 
    Example :
        3.0.0 :008 > str.slice(1..5)
        => "un is" 

    6.83) slice!(*args) : Removes and returns the substring of self specified by the arguments.
        slice!(index) → new_string or nil
        slice!(start, length) → new_string or nil
        slice!(range) → new_string or nil
        slice!(regexp, capture = 0) → new_string or nil
        slice!(substring) → new_string or nil 
    Example :
        3.0.0 :009 > str
        => "bun is fun" 
        3.0.0 :010 > str.slice!(7)
        => "f" 

    6.84) squeeze(*selectors) : “Squeezed” means that each multiple-character run of a selected character is squeezed down to a single character.
    Example :
        3.0.0 :011 > str="hello john"
        => "hello john" 
        3.0.0 :012 > str.squeeze()
        => "helo john" 

    6.85) squeeze!(*selectors) : Returns self if any changes were made, nil otherwise.

    6.86) start_with?(*string or regexp) : Returns whether self starts with any of the given string_or_regexp.
    Example :
        3.0.0 :013 > str.start_with?("he")
        => true 

    6.86) strip : Returns a copy of the receiver with leading and trailing whitespace removed
    Example : 
        3.0.0 :016 > str="\n\rhello\n\r"
        => "\n\rhello\n\r" 
        3.0.0 :017 > str.strip
        => "hello" 

    6.87) strip! : Modify original string.

    6.88) sub(pattern | replacement) : Returns a copy of self with only the first occurrence (not all occurrences) of the given pattern replaced.
    Example : 
        3.0.0 :018 > str="fun is fun"
        => "fun is fun" 
        3.0.0 :020 > str.sub("fun","sun")
         => "sun is fun" 

    6.89) sub!(pattern|replacement) : Modify the actual string.

    6.90) succ : Returns the successor to self. The successor is calculated by incrementing characters.
    Example : 
        3.0.0 :024 > str
        => "fun is fun" 
        3.0.0 :025 > str.succ
        => "fun is fuo" 
    
    6.91) succ! : It modifies self in place; returns self.
    Example : 
        3.0.0 :028 > str.succ!
        => "fun is fuo" 
        3.0.0 :029 > str
        => "fun is fuo" 

    6.92) sum(n=16) : Returns a basic n-bit checksum of the characters in self; the checksum is the sum of the binary value of each byte in self, modulo 2**n - 1.
    Example :
        3.0.0 :044 > str="abcd"
        => "abcd" 
        3.0.0 :045 > str.sum
        => 394 

    6.93) swapcase(*options) : Returns a string containing the characters in self, with cases reversed; each uppercase character is downcased; each lowercase character is upcased.
    Example : 
        3.0.0 :046 > str="HellO"
        => "HellO" 
        3.0.0 :047 > str.swapcase
        => "hELLo" 
    
    6.94) swapcase!(*options) : Upcases each lowercase character in self; downcases uppercase character; returns self if any changes were made, nil otherwise.

    6.95) to_c : Returns a complex which denotes the string form.
    Example :
        3.0.0 :048 > str="1"
        => "1" 
        3.0.0 :049 > str.to_c
        => (1+0i) 
    
    6.96) to_f : Returns the result of interpreting leading characters in self as a Float.
    Example : 
        3.0.0 :051"> str="201"
        => "201" 
        3.0.0 :052 > str.to_f
        => 201.0 
    
    6.97) to_i(base=10) : Returns the result of interpreting leading characters in self as an integer in the given base.
    Example : 
        3.0.0 :053 > str.to_i
        => 201 
        
    6.98) to_r : Returns the result of interpreting leading characters in str as a rational.
    Example :
        3.0.0 :054 > str.to_r
        => (201/1) 

    6.99) to_s : Returns self if self is a String, or self converted to a String if self is a subclass of String.
    Example : 
        3.0.0 :055 > a=100
        => 100 
        3.0.0 :056 > a.to_s
        => "100" 

    6.100) to_sym : Returns the Symbol corresponding to str, creating the symbol if it did not previously exist.
    Example :
        3.2.2 :005 > str="100"
        => "100" 
        3.2.2 :006 > str.to_sym
        => :"100" 

    6.101) tr(selector,replacement) : Returns a copy of self with each character specified by string selector translated to the corresponding character in string replacements.
    Example :
        3.2.2 :010 > str="hello"
        => "hello" 
        3.2.2 :011 > str.tr("el","ip")
        => "hippo" 
    
    6.102) tr!(selector,replacement) : Returns self if any changes were made, nil otherwise.

    6.103) tr_s(selector,replacement) : Like String#tr, but also squeezes the modified portions of the translated string; returns a new string.
    Example : 
        3.2.2 :014 > str
        => "hello" 
        3.2.2 :015 > str.tr_s("el","ip")
        => "hipo"
    
    6.104) tr_s(selector,replacement) : Like String#tr_s, but modifies self in place. Returns self if any changes were made, nil otherwise.

    6.105) undump : Returns an unescaped version of self.
    Example : 
        3.2.2 :020 > str
        => "hello" 
        3.2.2 :021 > s=str.dump
        => "\"hello\"" 
        3.2.2 :022 > s.undump
        => "hello" 

    6.106) upcase (*options) : Returns a string containing the upcased characters in self.
    Example : 
        3.2.2 :023 > str
        => "hello" 
        3.2.2 :024 > str.upcase
        => "HELLO" 
    
    6.107) upcase!(*options) : Upcases the characters in self; returns self if any changes were made, nil otherwise.
    Example :
        3.2.2 :025 > str.upcase!
        => "HELLO" 

    6.108) upto(other_string,exclusive =false){|string|...} : It calls the block with each string value returned by successive calls.
    Example : 
        3.2.2 :026 > str="a1"
        => "a1" 
        3.2.2 :027 > str.upto("a6"){|s| print s,' '}
        a1 a2 a3 a4 a5 a6  => "a1" 

    6.109) valid_encoding? : Returns true if self is encoded correctly, false otherwise.
    Example : 
        3.2.2 :029 > str.valid_encoding?
         => true 

    6.110)  gsub(pattern, replacement) → new_string
            gsub(pattern) {|match| ... } → new_string
            gsub(pattern) → enumerator 
            Returns a copy of self with all occurrences of the given pattern replaced.
    Example :
        3.2.2 :061 > str="A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!"
        => "A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!" 
        3.2.2 :062 > str.gsub(/[[:punct:]]/, '').gsub(/\s+/, '')
        => "AmanaplanacatahamayakayamahatacanalPanama" 
    
    6.111) gsub!(pattern,replacement)->new_string

7. Arrays : Ruby arrays are ordered collections of objects. They can hold objects like integer, number, hash, string, symbol or any other array.
    
    a) Creation of array : 
        a.1) Using literal constructor []
        a.2) Using new class method.
        Syntax : arr=Array.new
                or arr= Array.new(size) 
    b) length : To find the length of array.
        Syntax : <arr-name>.length
    c) Accessing array elements : using [] method
        Syntax : array-name[index];
    d) at method : To access a particular element, at method can also be used.
        Syntax : <arr-name>.at(index)
    e) fetch method : The fetch method is used to provide a default value error for out of array range indices.
        Syntax : <arr-name>.fetch(numbers,"default value")
    f) first and last method : The first and last method will return first and last element of an array respectively.
    g) take method : The take method returns the first n elements of an array.
    h) drop method : The drop method is the opposite of take method. It returns elements after n elements have been dropped.
    i) Adding items in array : 
        i.1) push or <<  -> at the end of an array
        i.2) unshift  -> front of array
        i.3) insert -> at particular index 
            Syntax : <arr-name>.insert(index,value)
    j) Remove items from array : To remove elements from an array.
        j.1) pop -> from end of an array
        j.2) shift   -> From start of an array
        j.3) delete  -> Delete from anywhere in an array.
            Syntax : <arr-name>.delete(value)
        j.4) uniq -> To remove duplicates from an array.
            Syntax : <arr-name>.uniq
    
    ** Public Class Methods Of Array **

    7.1) ::[](*args) : Returns a new array populated with the given objects.
    Example :
        3.2.2 :001 > arr=[1,2,3]
        => [1, 2, 3] 
    
    7.2) ::new → new_empty_array
        new(array) → new_array
        new(size) → new_array
        new(size, default_value) → new_array
        new(size) {|index| ... } → new_array 
        It returns a new array.
    Example :
        3.2.2 :004 > arr=Array.new([1,2,3])
        => [1, 2, 3] 

    7.3) ::try_convert(object) : If object is an Array object, returns object.
        Otherwise if object responds to :to_ary, calls object.to_ary and returns the result.
    Example : 
        3.2.2 :014 > Array.try_convert(arr)
        => [1, 2, 3] 
    
    ** Public Instance Methods of Array Class **

    7.4) array & other_array : Returns a new Array containing each element found in both array and Array other_array; duplicates are omitted; items are compared using eql?
    Example : 
        3.2.2 :019 > arr=[1,2,3]
        => [1, 2, 3] 
        3.2.2 :020 > other_arr=[3,4,5]
        => [3, 4, 5] 
        3.2.2 :021 > arr & other_arr
        => [3] 

    7.5) array * n : When non-negative argument Integer n is given, returns a new Array built by concatenating the n copies of self
    Example :
        3.2.2 :022 > arr
        => [1, 2, 3] 
        3.2.2 :023 > arr * 3
        => [1, 2, 3, 1, 2, 3, 1, 2, 3] 

    7.6) array + other_array : Returns a new Array containing all elements of array followed by all elements of other_array
    Example : 
        3.2.2 :027 > arr + other_arr
        => [1, 2, 3, 3, 4, 5] 
        3.2.2 :028 > arr
        => [1, 2, 3] 
        3.2.2 :029 > other_arr
        => [3, 4, 5] 
        3.2.2 :030 > arr + other_arr
        => [1, 2, 3, 3, 4, 5] 

    7.7) array - other_array : Returns a new Array containing only those elements from array that are not found in Array other_array.
    Example : 
        3.2.2 :031 > arr - other_arr
        => [1, 2] 
    
    7.8) array<<object : Appends object to self; returns self.
    Example :
        3.2.2 :032 > arr
        => [1, 2, 3] 
        3.2.2 :033 > arr << [4,5]
        => [1, 2, 3, [4, 5]] 

    7.9) array <=> other_array : Returns -1, 0, or 1 as self is less than, equal to, or greater than other_array. For each index i in self, evaluates result = self[i] <=> other_array[i].
    Example :
        3.2.2 :035 > arr
        => [1, 2, 3, [4, 5]] 
        3.2.2 :036 > other_arr
        => [3, 4, 5] 
        3.2.2 :037 > arr <=> other_arr
        => -1 

    7.10) array == other_array : Returns true if both array.size == other_array.size and for each index i in array, array[i] == other_array[i]
    Example :
        3.2.2 :041 > other_arr=[1,2.0,"hi"]
        => [1, 2.0, "hi"] 
        3.2.2 :042 > arr
        => [1, 2, "hi"] 
        3.2.2 :043 > arr == other_arr
        => true 

    7.11)  array[index] → object or nil
            array[start, length] → object or nil
            array[range] → object or nil 
    Example : 
        3.2.2 :044 > arr
        => [1, 2, "hi"] 
        3.2.2 :045 > arr[0]
        => 1
    
    7.12) array[index]=object : Assigns elements in self; returns the given object.
         array[index] = object → object
        array[start, length] = object → object
        array[range] = object → object 
    Example :
        3.2.2 :046 > arr[0]='Hello'
        => "Hello" 
        3.2.2 :047 > arr
        => ["Hello", 2, "hi"] 
    Another example :
        3.2.2 :048 > arr[0..1]="object"
         => "object" 

    7.13)  all? → true or false
            all? {|element| ... } → true or false
            all?(obj) → true or false 
        Returns true if all elements of self meet a given criterion.
    Example :
        3.2.2 :051 > arr.all?
        => true 
        3.2.2 :052 > arr=[0,nil,2.0]
        => [0, nil, 2.0] 
        3.2.2 :053 > arr.all?
        => false 

    7.14)  any? → true or false
            any? {|element| ... } → true or false
            any?(obj) → true or false 
        Returns true if any element of self meets a given criterion.
    Example :
        3.2.2 :054 > [nil,0,false].any?
        => true 
        3.2.2 :055 > [nil,false].any?
        => false

    7.15) append(*args) or push : Appends the elements in the end of an array.
    Example : 
        3.2.2 :056 > arr
        => [0, nil, 2.0] 
        3.2.2 :057 > arr.append(5)
        => [0, nil, 2.0, 5] 

    7.16) assoc(object) : Returns the first element in self that is an Array whose first element == obj.
    Example :
        3.2.2 :061 > multi_arr=[[1,2],[3,4]]
        => [[1, 2], [3, 4]] 
        3.2.2 :062 > multi_arr.assoc(3)
        => [3, 4] 

    7.17) at(index) : Return the object at that index.
    Example :
        3.2.2 :066 > arr.at(3)
         => 5 

    7.18) bsearch {|element|...} : Returns an element from self selected by a binary search.
    Example :
        3.2.2 :072 > bsearch_arr=[1,2,5,10]
        => [1, 2, 5, 10] 
        3.2.2 :073 > bsearch_arr.bsearch{|x| x>=4}
        => 5 
    
    7.19) bsearch_index {|element| ... } : Searches self as described at method bsearch, but returns the index of the found element instead of the element itself.
    Example :
        3.2.2 :074 > bsearch_arr.bsearch_index{|x| x>=4}
        => 2 

    7.20) clear : Removes all elements from self.
    Example :
        3.2.2 :076 > bsearch_arr.clear
        => [] 

    7.21) collect or map : Calls the block, if given, with each element of self; returns a new Array whose elements are the return values from the block.
    Example :
        3.2.2 :077 > arr
        => [0, nil, 2.0, 5] 
        3.2.2 :078 > arr.collect{|x| puts x}
        0

        2.0
        5
        => [nil, nil, nil, nil] 
    
    7.22) collect! or map! : Return self with modified values.
    Example :
        3.2.2 :079 > arr.collect!{|x| x.class}
        => [Integer, NilClass, Float, Integer] 
        3.2.2 :080 > arr
        => [Integer, NilClass, Float, Integer] 

    7.23) combination(n) {|element| ... } : Calls the block, if given, with combinations of elements of self; returns self.
    Example :
        3.2.2 :084 > arr.combination(2) {|x| p x}
        [0, 1]
        [0, 2]
        [1, 2]
        => [0, 1, 2]
    
    7.24) compact : Returns a new Array containing all non-nil elements from self.
    Example :
        3.2.2 :088 > arr=[1,nil,nil,2,nil,'Hi']
        => [1, nil, nil, 2, nil, "Hi"] 
        3.2.2 :089 > arr.compact
        => [1, 2, "Hi"] 
    
    7.25) compact! : Return self with modifications.

    7.26) concat(*other_arrays) : Adds to array all elements from each Array in other_arrays; returns self.
    Example :
        3.2.2 :091 > arr.compact!
        => [1, 2, "Hi"] 
        3.2.2 :092 > arr.concat([3,4],[5,6])
        => [1, 2, "Hi", 3, 4, 5, 6] 

    7.27) count → an_integer
            count(obj) → an_integer
            count {|element| ... } → an_integer
            Returns a count of specified elements.
    Example :
        3.2.2 :093 > arr.count
        => 7 

    7.28)  cycle {|element| ... } → nil
        cycle(count) {|element| ... } → nil
        cycle → new_enumerator
        cycle(count) → new_enumerator 
        When called with positive Integer argument count and a block, calls the block with each element, then does so again, until it has done so count times; returns nil
    Example : 
        3.2.2 :100 > arr.cycle(2) {|x| print x ,' '}
        1 2 Hi 3 4 5 6 1 2 Hi 3 4 5 6  => nil 

    7.29) deconstruct : 
    Example :
        3.2.2 :101 > arr.deconstruct
        => [1, 2, "Hi", 3, 4, 5, 6] 

    7.30) delete(object) : Removes zero or more elements from self.
    Example :   
        3.2.2 :105 > arr.delete(2)
        => 2 
        3.2.2 :106 > arr
        => [1, 3] 

    7.31) delete_at(index) : Deletes an element from self, per the given Integer index.
    Example :
        3.2.2 :107 > arr=[1,2,3,4,5]
        => [1, 2, 3, 4, 5] 
        3.2.2 :108 > arr.delete_at(2)
        => 3 

    7.32) delete_if{|element|...} : Delete elements from array with given condition.
    Example :
        3.2.2 :109 > arr
        => [1, 2, 4, 5] 
        3.2.2 :110 > arr.delete_if{|x| x>2}
        => [1, 2] 

    7.33) difference(*other_arrays) : Returns a new Array containing only those elements from self that are not found in any of the Arrays other_arrays.
    Example :
        3.2.2 :115 > arr
        => [1, 2, 2, 3, 3] 
        3.2.2 :116 > arr.difference([1,2],[2,3])
        => [] 

    7.34) drop(n) : Drop the first n elements and return the new array.
    Example :
        3.2.2 :117 > arr
        => [1, 2, 2, 3, 3] 
        3.2.2 :118 > arr.drop(2)
        => [2, 3, 3] 

    7.35) dig(index, *identifiers) : Finds and returns the object in nested objects that is specified by index and identifiers.
    Example :
        3.2.2 :124 > nested_arr=[1,[2,3,[4,5]]]
        => [1, [2, 3, [4, 5]]] 
        3.2.2 :126 > nested_arr.dig(1)
        => [2, 3, [4, 5]] 

    7.36) drop_while{|element|...} : Drops the leading elements on the basis of conditions.
    Example :
        3.2.2 :127 > arr
        => [1, 2, 2, 3, 3] 
        3.2.2 :128 > arr.drop_while{|x| x<=2}
        => [3, 3] 

    7.37) each {|element|...} : Iterates over array elements.
    Example :3.2.2 :130 > arr.each{|x| p x}
        1
        2
        2
        3
        3
        => [1, 2, 2, 3, 3] 
    
    7.38) each_index {|index|...} : Iterates over array indexes.
    Example :
        3.2.2 :132 > arr.each_index{|x| puts "#{x} #{arr[x]}"}
        0 1
        1 2
        2 2
        3 3
        4 3
        => [1, 2, 2, 3, 3] 
    
    7.39) empty? : Returns true if the count of elements in self is zero, false otherwise.
    Example :
        3.2.2 :134 > arr.empty?
        => false

    7.40) eql?other_array : Returns true if self and other_array are the same size, and if, for each index i in self, self[i].eql? other_array[i].
    Example :
        3.2.2 :135 > arr
        => [1, 2, 2, 3, 3] 
        3.2.2 :136 > other_arr
        => [1, 2.0, "hi"] 
        3.2.2 :137 > arr.eql?other_arr
        => false 

    7.41)  fetch(index) → element
            fetch(index, default_value) → element
            fetch(index) {|index| ... } → element 
        Returns the element at particular index.
    Example :
        3.2.2 :140 > arr
        => [1, 2, 2, 3, 3] 
        3.2.2 :141 > arr.fetch(3)
        => 3

    7.42) fill(obj) → self
        fill(obj, start) → self
        fill(obj, start, length) → self
        fill(obj, range) → self
        fill {|index| ... } → self
        fill(start) {|index| ... } → self
        fill(start, length) {|index| ... } → self
        fill(range) {|index| ... } → self
        Replaces specified elements in self with specified objects; returns self.
    Example :
        3.2.2 :142 > arr.fill(2)
        => [2, 2, 2, 2, 2] 

    7.43) filter {|element|...} or select {|element|...} : It filter out the objects on the given condition or if no condition given then it returns a new enumerator.
    Example :
        3.2.2 :146 > arr.filter{|x| print x,' '}
        2 2 2 2 3  => [] 

    7.44) filter! {|element|...} or select! {|element|...} : It filter the objects and modify it into original array.

    7.45) find_index or index : Returns the index of a specified element.
    Example :
        3.2.2 :148 > arr=[1,2,3,4,5]
        => [1, 2, 3, 4, 5] 
        3.2.2 :149 > arr.find_index(3)
        => 2 

    7.46) first or first(n) : Return first element or first n elements in new array.
    Example : 
        3.2.2 :151 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :152 > arr.first(2)
        => [1, 2] 

    7.47) flatten or flatten(level) : Returns a new Array that is a recursive flattening of self
    Example :
        3.2.2 :153 > multi_arr
        => [[1, 2], [3, 4]] 
        3.2.2 :154 > multi_arr.flatten
        => [1, 2, 3, 4] 

    7.48) flatten! or flatten(level) : Same as flatten but it modifies array.

    7.49) hash : Returns the integer hash value for self.
    Example :
        3.2.2 :155 > arr.hash
        => -41166320240308276 

    7.50) include?(object) : Returns true if for some index i in self, obj == self[i]; otherwise false.
    Example :
        3.2.2 :156 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :157 > arr.include?(3)
        => true

    7.51) initialize_copy(other_array) or replace(other_array) : Replaces the content of self with the content of other_array; returns self.
    Example :
        3.2.2 :159 > arr.replace([1,2,3,'Hi',5])
        => [1, 2, 3, "Hi", 5] 

    7.52) insert(index,*objects) : Inserts given objects before or after the element at Integer index offset; returns self.
    Example :  
        3.2.2 :160 > arr
        => [1, 2, 3, "Hi", 5] 
        3.2.2 :161 > arr.insert(2,"hello")
        => [1, 2, "hello", 3, "Hi", 5] 
    
    7.53) inspect : Returns the new String formed by calling method #inspect on each array element.
    Example :
        3.2.2 :162 > arr.inspect
        => "[1, 2, \"hello\", 3, \"Hi\", 5]" 

    7.54) intersect?(other_array) : Returns true if the array and other_ary have at least one element in common, otherwise returns false.
    Example :
        3.2.2 :163 > arr
        => [1, 2, "hello", 3, "Hi", 5] 
        3.2.2 :164 > other_arr
        => [1, 2.0, "hi"] 
        3.2.2 :165 > arr.intersect?(other_arr)
        => true 

    7.55) intersection(*other_array) : Returns a new Array containing each element found both in self and in all of the given Arrays other_arrays.
    Example :
        3.2.2 :166 > arr.intersection(other_arr)
        => [1] 
    
    7.56) join , join (separator=$) : Returns the new String formed by joining the array elements after conversion. 
    Example :
        3.2.2 :167 > arr
        => [1, 2, "hello", 3, "Hi", 5] 
        3.2.2 :168 > arr.join
        => "12hello3Hi5" 

    7.57) keep if {|element|...} : Retains those elements for which the block returns a truthy value; deletes all other elements; returns self.
    Example :
        3.2.2 :188 > arr.keep_if{|x| puts x}
        1
        2
        3
        4
        5
        => [] 

    7.58) last or last(n) : Returns elements from self; self is not modified.
    Example :
        3.2.2 :190 > arr=[1,2,3,4,5]
        => [1, 2, 3, 4, 5] 
        3.2.2 :191 > arr.last(3)
        => [3, 4, 5] 

    7.59) length or size : Returns the count of elements in self.
    Example :
        3.2.2 :192 > arr.length
        => 5 

    7.60)  max → element
            max {|a, b| ... } → element
            max(n) → new_array
            max(n) {|a, b| ... } → new_array 
        Returns the maximum element or returns the maximum element on the basis of condition.
    Example :
        3.2.2 :193 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :194 > arr.max
        => 5 

    7.70)  min → element
        min { |a, b| ... } → element
        min(n) → new_array
        min(n) { |a, b| ... } → new_array 
        Return the minimum element from array or minimum element on the basis of condition.
    Example :
        3.2.2 :195 > arr.min
        => 1 

    7.71) minmax → [min_val, max_val]
    minmax {|a, b| ... } → [min_val, max_val] : It returns the minimum and maximum value.
    Example :
        3.2.2 :197 > arr.minmax
        => [1, 5] 

    7.72) none? → true or false
        none? {|element| ... } → true or false
        none?(obj) → true or false 
    Example :
        3.2.2 :198 > [nil,false,'!'].none?
        => false 
    
    7.73) one? → true or false
        one? {|element| ... } → true or false
        one?(obj) → true or false
        Returns true if exactly one element of self meets a given criterion.
    Example :
        3.2.2 :199 > [nil,false].one?
        => false 

    7.74) permutation {|element| ... } → self
        permutation(n) {|element| ... } → self
        permutation → new_enumerator
        permutation(n) → new_enumerator
    Example :
        3.2.2 :205 > arr.permutation(2) {|x| p x}
        [1, 2]
        [1, 3]
        [1, 4]
        [1, 5]
        [2, 1]
        [2, 3]
        [2, 4]
        [2, 5]
        [3, 1]
        [3, 2]
        [3, 4]
        [3, 5]
        [4, 1]
        [4, 2]
        [4, 3]
        [4, 5]
        [5, 1]
        [5, 2]
        [5, 3]
        [5, 4]
        => [1, 2, 3, 4, 5] 
    
    7.75) pop or pop(n) : Removes elements from the array.
    Example :
        3.2.2 :206 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :207 > arr.pop
        => 5 
        3.2.2 :208 > arr
        => [1, 2, 3, 4]

    7.76) prepend(*args) : Prepends the given objects to self.
    Example :
        3.2.2 :211 > arr.prepend(3,4,5)
        => [3, 4, 5, 1, 2] 
 
    7.77)  product(*other_arrays) → new_array
        product(*other_arrays) {|combination| ... } → self
    Computes and returns or yields all combinations of elements from all the Arrays, including both self and other_arrays.
    Example :
        .2.2 :212 > arr
        => [3, 4, 5, 1, 2] 
        3.2.2 :213 > other_arr
        => [1, 2.0, "hi"] 
        3.2.2 :214 > arr.product(other_arr)
        => 
        [[3, 1],
        [3, 2.0],
        [3, "hi"],
        [4, 1],
        [4, 2.0],
        [4, "hi"],
        [5, 1],
        [5, 2.0],
        [5, "hi"],
        [1, 1],
        [1, 2.0],
        [1, "hi"],
        [2, 1],
        [2, 2.0],
        [2, "hi"]] 
    
    7.78) rassoc(obj) : Returns the first element in self that is an Array whose second element == obj
    Example :
        3.2.2 :217 > multi_arr
        => [[1, 2], [3, 4]] 
        3.2.2 :218 > multi_arr.rassoc(2)
        => [1, 2] 

    7.79) reject{|element|...} : Returns a new Array whose elements are all those from self for which the block returns false or nil.
    Example :
        3.2.2 :219 > arr
        => [3, 4, 5, 1, 2] 
        3.2.2 :220 > arr.reject{|x| puts x>2}
        true
        true
        true
        false
        false
        => [3, 4, 5, 1, 2] 
    
    7.80) reject! {|element|...} : Removes each element for which the block returns a truthy value.

    7.81) repeated_combination(n) {|element|...} : Calls the block with each repeated combination of length n of the elements of self; each combination is an Array; returns self. The order of the combinations is indeterminate.
    Example :
        3.2.2 :221 > arr
        => [3, 4, 5, 1, 2] 
        3.2.2 :222 > arr.repeated_combination(2) {|x| p x}
        [3, 3]
        [3, 4]
        [3, 5]
        [3, 1]
        [3, 2]
        [4, 4]
        [4, 5]
        [4, 1]
        [4, 2]
        [5, 5]
        [5, 1]
        [5, 2]
        [1, 1]
        [1, 2]
        [2, 2]
        => [3, 4, 5, 1, 2] 

    7.82) repeated_permutation(n) {|element|...} : Calls the block with each repeated permutation of length n of the elements of self; each permutation is an Array; returns self. The order of the permutations is indeterminate.
    Example : 
        3.2.2 :224 > arr.repeated_permutation(2) {|x| p x}
        [3, 3]
        [3, 4]
        [3, 5]
        [3, 1]
        [3, 2]
        [4, 3]
        [4, 4]
        [4, 5]
        [4, 1]
        [4, 2]
        [5, 3]
        [5, 4]
        [5, 5]
        [5, 1]
        [5, 2]
        [1, 3]
        [1, 4]
        [1, 5]
        [1, 1]
        [1, 2]
        [2, 3]
        [2, 4]
        [2, 5]
        [2, 1]
        [2, 2]
        => [3, 4, 5, 1, 2] 

    7.83) reverse : Returns a new Array with the elements of self in reverse order.
    Example :
        3.2.2 :227 > arr=[1,2,3,4,5]
        => [1, 2, 3, 4, 5] 
        3.2.2 :228 > arr.reverse
        => [5, 4, 3, 2, 1] 

    7.84) reverse! : Reverses self in place.

    7.85) reverse_each {|element|...} : Iterates backwards over array elements.
    Example :   
        3.2.2 :229 > arr.reverse_each{ |x| print x,","}
        5,4,3,2,1, => [1, 2, 3, 4, 5] 

    7.86) rindex(object) or rindex {|element|...} : Returns the index of the last element for which object == element.
    Example :
        3.2.2 :230 > arr=[1,2,3,2,4]
        => [1, 2, 3, 2, 4] 
        3.2.2 :231 > arr.rindex(2)
        => 3 

    7.87) rotate or rotate(count) : Returns a new Array formed from self with elements rotated from one end to the other.
    Example :
        3.2.2 :233 > arr=[1,2,3,4,5]
        => [1, 2, 3, 4, 5] 
        3.2.2 :234 > arr.rotate
        => [2, 3, 4, 5, 1] 
        3.2.2 :235 > arr.rotate(2)
        => [3, 4, 5, 1, 2] 

    7.88) rotate! or rotate!(count) : Rotates self in place by moving elements from one end to the other; returns self.

    7.89) sample or sample(n) : Returns random elements from self.
    Example :
        3.2.2 :236 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :238 > arr.sample
        => 5 

    7.90) shift or shift(n) : It removes the elements from the front and return the leading elements.
    Example :
        3.2.2 :240 > arr.shift
        => 1 
        3.2.2 :241 > arr
        => [2, 3, 4, 5] 
    
    7.91) shuffle : Returns a new array with elements of self shuffled.
    Example :
        3.2.2 :244 > arr
        => [2, 3, 4, 5] 
        3.2.2 :245 > arr.shuffle
        => [5, 4, 2, 3] 

    7.92) shuffle! : Returns self with elements of self shuffled.

    7.93) slice(index) → object or nil
            slice(start, length) → object or nil
            slice(range) → object or nil
            slice(aseq) → object or nil
        Returns elements from self; does not modify self.
    Example : slice(aseq) example:-
        3.2.2 :250 > arr
        => [2, 3, 4, 5] 
        3.2.2 :251 > arr[(0..).step(3)]
        => [2, 5] 

    7.94) slice!(n) → object or nil
        slice!(start, length) → new_array or nil
        slice!(range) → new_array or nil 
    Modify in original array.

    7.95) sort or sort {|a,b|...} : To sort an array.
    Example : 
        3.2.2 :252 > arr=["e","a","d","b","c"]
        => ["e", "a", "d", "b", "c"] 
        3.2.2 :253 > arr.sort{|a,b| a<=>b}
        => ["a", "b", "c", "d", "e"] 
    Sort in descending order :
        3.2.2 :254 > arr.sort{|a,b| b<=>a}
        => ["e", "d", "c", "b", "a"] 
    
    7.96) sort! or sort!{|a,b|...} : To sort an array and return self.
    Example :
        3.2.2 :256 > arr=[5,4,3,2,1]
        => [5, 4, 3, 2, 1] 
        3.2.2 :257 > arr.sort
        => [1, 2, 3, 4, 5] 
    
    7.97) sort_by!{|element|...} : Sorts the elements of self in place, using an ordering determined by the block; returns self.
    Example :
        3.2.2 :262 > arr.sort_by!{ |x,y| x<=>y}
        => [1, 2, 3, 4, 5] 
    
    7.98) sum(init=0) or sum(init=0) {|element|...} : It gives the sum of elements from an array.
    Example :
        3.2.2 :262 > arr.sort_by!{ |x,y| x<=>y}
        => [1, 2, 3, 4, 5] 
        3.2.2 :263 > arr.sum
        => 15 
    
    7.99) take(n) : Returns a new Array containing the first n element of self, where n is a non-negative Integer; does not modify self.
    Example :
        3.2.2 :267 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :268 > arr.take(3)
        => [1, 2, 3] 
    
    7.100) take_while {|element|...} : Returns a new Array containing zero or more leading elements of self; does not modify self.
    Example :
        3.2.2 :275 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :276 > arr.take_while{|x| p x==1}
        true
        false
        => [1] 

    7.101) to_a : When self is an instance of Array, returns self.
    Example :
        3.2.2 :277 > arr.to_a
         => [1, 2, 3, 4, 5] 
        
    7.102) to_ary : Return self.
    Example :
        3.2.2 :281 > arr.to_ary
        => [1, 2, 3, 4, 5] 

    7.103) to_h or to_h{|element|...} : Returns a new Hash formed from self.
    Example :
        3.2.2 :284 > multi_arr
        => [[1, 2], [3, 4]] 
        3.2.2 :285 > multi_arr.to_h
        => {1=>2, 3=>4} 

    7.104) to_s : Returns the new String formed by calling method.
    Example :
        3.2.2 :293 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :294 > arr.to_s
        => "[1, 2, 3, 4, 5]" 
    
    7.105) transpose : Transposes the rows and columns in an Array of Arrays; the nested Arrays must all be the same size.
    Example :
        3.2.2 :298 > multi_arr
        => [[1, 2], [3, 4]] 
        3.2.2 :299 > multi_arr.transpose
        => [[1, 3], [2, 4]] 
    
    7.106) union(*other_arrays) : Returns a new Array that is the union of self and all given Arrays other_arrays; duplicates are removed; order is preserved; items are compared using eql?
    Example :
        3.2.2 :300 > arr
        => [1, 2, 3, 4, 5] 
        3.2.2 :301 > arr.union([4,5,6],[5,6,7])
        => [1, 2, 3, 4, 5, 6, 7] 

    7.107) uniq or uniq {|element|...} : Returns a new Array containing those elements from self that are not duplicates, the first occurrence always being retained.
    Example :
        3.2.2 :302 > arr=[1,2,2,1,3,3]
        => [1, 2, 2, 1, 3, 3] 
        3.2.2 :303 > arr.uniq
        => [1, 2, 3] 

    7.108) uniq! or uniq! {|element|...} : Return modified original array.

    7.109) values_at(*indexes) : Returns a new Array whose elements are the elements of self at the given Integer or Range indexes.
    Example :
        3.2.2 :304 > arr
        => [1, 2, 2, 1, 3, 3] 
        3.2.2 :305 > arr.values_at(0,2,4)
        => [1, 2, 3] 
    
    7.110) zip(*other_arrays) or zip(*other_arrays) {|other_array|...} : When no block given, returns a new Array new_array of size self.size whose elements are Arrays.
    Example :
        3.2.2 :307 > arr1=[1,2,3]
        => [1, 2, 3] 
        3.2.2 :308 > arr2=[4,5,6]
        => [4, 5, 6] 
        3.2.2 :309 > arr3=[7,8,9]
        => [7, 8, 9] 
        3.2.2 :310 > arr1.zip(arr2,arr3)
        => [[1, 4, 7], [2, 5, 8], [3, 6, 9]] 
    
    7.111) array | other_array : Returns the union of array and Array other_array; duplicates are removed; order is preserved; items are compared using eql?
    Example :
        3.2.2 :314 > arr
        => [1, 2, 2, 1, 3, 3] 
        3.2.2 :315 > other_arr
        => [1, 2.0, "hi"] 
        3.2.2 :316 > arr | other_arr
        => [1, 2, 3, 2.0, "hi"] 

8. Hashes : A hash is a collection of unique keys and their values. If a hash is accessed with a key that does not exist, the method will return nil.
    Syntax : <hash-name>={key1=>value1 , key2=>value2, ...}
                                or
            <hash-name>={key1:value1 , key2:value2 , ...}
    
    ** Public Class Methods **

    8.1) Hash[] → new_empty_hash
         Hash[hash] → new_hash
         Hash[ [*2_element_arrays] ] → new_hash
         Hash[*objects] → new_hash
        Returns a new Hash object populated with the given objects.
    Example :
        3.0.0 :003 > h = Hash[:A , 1, :B,2]
        => {:A=>1, :B=>2} 
        3.0.0 :004 > h={A:1,B:2,C:3}
        => {:A=>1, :B=>2, :C=>3} 
    
    8.2) new(default_value = nil) → new_hash
        new {|hash, key| ... } → new_hash : Returns a new empty Hash object.
    Example :
        3.0.0 :005 > h=Hash.new
        => {}
    
    8.3) try_convert(object) : If obj is a Hash object, returns obj.
    Example :
        3.0.0 :033 > Hash.try_convert(h)
        => {:k=>1} 
    
    ** Public Instance Methods **

    8.4) hash < other_hash , hash >other_hash : Returns true if hash is a proper subset of other_hash, false otherwise.
    Example :
        3.0.0 :040 > h1={A:0, B:1}
        => {:A=>0, :B=>1} 
        3.0.0 :041 > h2={A:0, B:1,C:2}
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :042 > h1<h2
        => true 

    8.5) hash <= other_hash hash >= other_hash : Returns true if hash is a subset of other_hash, false otherwise.
    Example :
        3.0.0 :047 > h1
        => {:A=>0, :B=>1} 
        3.0.0 :048 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :049 > h1<=h2
        => true 

    8.6) hash == other_hash : If key and value are equal in both hashes.Keys are regardless of order.
    Example :
        3.0.0 :053 > h1
        => {:A=>0, :B=>1} 
        3.0.0 :054 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :055 > h1 == h2
        => false 

    8.7) hash[key] : Returns the value associated with the given key, if found.
    Example : 
        3.0.0 :057 > h1[:A]
        => 0 

    8.8) hash[key]=value : Associates the given value with the given key; returns value.
    Example : 
        3.0.0 :059 > h1[:C]=2
        => 2 
        3.0.0 :060 > h1
        => {:A=>0, :B=>1, :C=>2} 

    8.9) any? → true or false
        any?(object) → true or false
        any? {|key, value| ... } → true or false
        Returns true if any element satisfies a given criterion; false otherwise.
    Example :
        3.0.0 :075 > h1
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :076 > h1.any?([:B,1])
        => true 
    
    8.10) assoc(key) : If the given key is found, returns a 2-element Array containing that key and its value.
    Example :
        3.0.0 :081 > h1
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :082 > h1.assoc(:B)
        => [:B, 1]

    8.11) clear : Removes all hash entries; returns self.
    Example :  
        3.0.0 :083 > h1.clear
        => {} 

    8.12) compact : Returns a copy of self with all nil-valued entries removed
    Example :
        3.0.0 :085 > h1={A:0,B:1,C:2,D:nil}
        => {:A=>0, :B=>1, :C=>2, :D=>nil} 
        3.0.0 :086 > h1.compact
        => {:A=>0, :B=>1, :C=>2} 

    8.13) compact! : Returns self with all its nil-valued entries removed.
    
    8.14) compare_by_identity : Sets self to consider only identity in comparing keys; two keys are considered the same only if they are the same object; returns self.
    Example :
        3.0.0 :111 > h3
        => {} 
        3.0.0 :112 > h3.compare_by_identity
        => {} 
        3.0.0 :113 > h3["A"]=0
        => 0 
        3.0.0 :114 > h3["A"]=1
        => 1 
        3.0.0 :115 > h3
        => {"A"=>0, "A"=>1} 
    
    8.15) compare_by_identity? : Returns true if compare_by_identity has been called, false otherwise.
    Example :
        3.0.0 :116 > h3.compare_by_identity?
        => true 
    
    8.16) deconstruct_keys(p1) : Returns hash.
    Example :
        3.0.0 :124 > h1.deconstruct_keys(h1)
        => {:A=>0, :B=>1, :C=>2, :D=>nil} 

    8.17) default or default(key) : Returns the default value for the given key.
    Example :   
        3.0.0 :144 > h3=Hash.new{|hash,key| hash[key]="No value"}
        => {} 
        3.0.0 :145 > h3[:a]=1
        => 1 
        3.0.0 :146 > h3.default(:a)
        => "No value" 

    8.18) default = value : Sets the default value to value; returns value.
    Example :
        3.0.0 :148 > h3.default=false
        => false 
    
    8.19) default_proc : Returns the default proc for self.
    Example :
        3.0.0 :161 > h3
        => {} 
        3.0.0 :162 > h3.default_proc = proc{|hash,key| "Default value"}
        => #<Proc:0x000055fa6078ec80 (irb):162> 
        3.0.0 :163 > h3.default_proc.class
        => Proc 
        3.0.0 :164 > h3[:a]
        => "Default value" 

    8.20) default_proc=proc : Sets the default proc for self to proc.
    Example :
        3.0.0 :174 > h3.default_proc=nil
        => nil 
        3.0.0 :175 > h3.default_proc
        => nil 
    
    8.21) delete(key) or delete(key) {|key|...}: Deletes the entry for the given key and returns its associated value.
    Example :
        3.0.0 :177 > h1.delete(:D)
        => nil 
        3.0.0 :178 > h1
        => {:A=>0, :B=>1, :C=>2} 
    Another Example :
        3.0.0 :187 > h1.delete(:C) {|key| "Not found"}
        => "Not found" 

    8.22) delete_if {|key,value|...} : If a block given, calls the block with each key-value pair; deletes each entry for which the block returns a truthy value; returns self.
    Example :
        3.0.0 :189 > h1.delete_if{|key,value| value>0}
        => {:A=>0} 
        3.0.0 :190 > h1
        => {:A=>0} 
    
    8.23) dig (key,*identifiers) : Finds and returns the object in nested objects that is specified by key and identifiers. The nested objects may be instances of various classes.
    Example :
        3.0.0 :193 > nested_hash={A:{B:{C:[3,4,5]}}}
        => {:A=>{:B=>{:C=>[3, 4, 5]}}} 
        3.0.0 :194 > nested_hash.dig(:A) 
        => {:B=>{:C=>[3, 4, 5]}} 

    8.24) each {|key,value|...} or each_pair{|key,value|...} : Calls the given block with each key-value pair; returns self.
    Example :   
        3.0.0 :201 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :202 > h2.each{|key,value| puts "#{key}: #{value}"}
        A: 0
        B: 1
        C: 2
        => {:A=>0, :B=>1, :C=>2} 

    8.25) each_key {|key|...} : Calls the given block with each key; returns self.
    Example :
        3.0.0 :203 > h2.each_key {|key| puts key}
        A
        B
        C
        => {:A=>0, :B=>1, :C=>2} 
    
    8.26) each_value {|value|...} : Calls the given block with each value; returns self.
    Example :
        3.0.0 :207 > h2.each_value{|value| puts "#{value}"}
        0
        1
        2
        => {:A=>0, :B=>1, :C=>2} 

    8.27) empty? : Returns true if there are no hash entries, false otherwise.
    Example :
        3.0.0 :209 > h2.empty?
        => false 
        3.0.0 :210 > h3
        => {} 
        3.0.0 :211 > h3.empty?
        => true 

    8.28) eql?object : Returns true if hash and object have same keys regardless of order and both have same values otherwise false.
    Example :
        3.0.0 :212 > h1
        => {:A=>0} 
        3.0.0 :213 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :214 > h1.eql?h2
        => false          
    
    8.29) except(*keys) : Returns a new Hash excluding entries for the given keys.
    Example :   
        3.0.0 :215 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :216 > h2.except(:C)
        => {:A=>0, :B=>1} 

    8.30) fetch(key) → object
        fetch(key, default_value) → object
        fetch(key) {|key| ... } → object : Returns the value for the given key, if found.
    Example :
        3.0.0 :217 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :218 > h2.fetch(:B)
        => 1 
    
    8.31) fetch_value(*keys) or fetch_values(*keys) {|key|...} : Returns a new Array containing the values associated with the given keys *keys.
    Example :   
        3.0.0 :222 > h2.fetch_values(:A,:B)
        => [0, 1] 
    
    8.32) filter or select : Returns a new Hash object whose entries are those for which the block returns a truthy value.
    Example :
        3.0.0 :227 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :228 > h2.filter {|key,value| puts "#{key}:#{value}"}
        A:0
        B:1
        C:2
        => {} 
    
    8.33) filter! or select! : Returns self, whose entries are those for which the block returns a truthy value.

    8.34) flatten / flatten(level) : Returns a new Array object that is a 1-dimensional flattening of self.
    Example :
        3.0.0 :234 > nested_hash = {A: 0, B: [:C, [:D, [:E, ]]]}
        => {:A=>0, :B=>[:C, [:D, [:E]]]} 
        3.0.0 :236 > nested_hash.flatten(4)
        => [:A, 0, :B, :C, :D, :E] 

    8.35) has_key?(key) or key?(key) or member?(key) or include?(key) : Returns true if key is a key in self, otherwise false.
    Example :
        3.0.0 :238 > h2
        => {:A=>0, :B=>1, :C=>2} 
        3.0.0 :239 > h2.has_key?(:A)
        => true 

    8.36) has_value?(value) or value?(value) : Returns true if value is a value in self, otherwise false.
    Example :
        3.0.0 :001 > h1={A:1,B:2,C:3}
        => {:A=>1, :B=>2, :C=>3} 
        3.0.0 :002 > h1.has_value?(2)
        => true 

    8.37) hash : Returns the Integer hash-code for the hash.
    Example :
        3.0.0 :004 > h1.hash
         => -4074165278872340204 
        
    8.38) initialize_copy(other_hash) or replace(other_hash) : Replaces the entire contents of self with the contents of other_hash; returns self.
    Example : 
        3.0.0 :006 > h1
        => {:A=>1, :B=>2, :C=>3} 
        3.0.0 :007 > h1.replace({D:1,E:2,F:3})
        => {:D=>1, :E=>2, :F=>3} 

    8.39) inspect or to_s : Returns a new String containing the hash entries.
    Example :
        3.0.0 :009 > h1.inspect
        => "{:D=>1, :E=>2, :F=>3}" 

    8.40) invert : Returns a new Hash object with the each key-value pair inverted.
    Example :
        3.0.0 :010 > h1
        => {:D=>1, :E=>2, :F=>3} 
        3.0.0 :011 > h1.invert
        => {1=>:D, 2=>:E, 3=>:F} 
    
    8.41) keep_if {|key,value|...} / keep_if->new_enumerator : Calls the block for each key-value pair; retains the entry if the block returns a truthy value; otherwise deletes the entry; returns self.
    Example :   
        3.0.0 :012 > h1
        => {:D=>1, :E=>2, :F=>3} 
        3.0.0 :013 > h1.keep_if{|key,value| value>1}
        => {:E=>2, :F=>3} 
    
    8.42) key(value) : Returns the key for the first-found entry with the given value.
    Example :
        3.0.0 :014 > h1
        => {:E=>2, :F=>3} 
        3.0.0 :015 > h1.key(3)
        => :F 
    
    8.43) keys : Returns a new Array containing all keys in self.
    Example :
        3.0.0 :016 > h1.keys
        => [:E, :F] 

    8.44) length or size : Returns the count of entries in self.
    Example :
        3.0.0 :017 > h1
        => {:E=>2, :F=>3} 
        3.0.0 :018 > h1.length
        => 2 
    
    8.45) merge → copy_of_self
        merge(*other_hashes) → new_hash
        merge(*other_hashes) { |key, old_value, new_value| ... } → new_hash
        Returns the new Hash formed by merging each of other_hashes into a copy of self.
    Example :
        3.0.0 :020 > h1
        => {:E=>2, :F=>3} 
        3.0.0 :021 > h2={A:1,B:2,C:3}
        => {:A=>1, :B=>2, :C=>3} 
        3.0.0 :022 > h1.merge(h2)
        => {:E=>2, :F=>3, :A=>1, :B=>2, :C=>3} 
    Note :- update is an alias for merge.

    8.46) merge! → self
        merge!(*other_hashes) → self
        merge!(*other_hashes) { |key, old_value, new_value| ... } → self
        Merges each of other_hashes into self; returns self.
    Note :- update! is an alias for merge!.
    
    8.47) rassoc(value) : Returns a new 2-element Array consisting of the key and value of the first-found entry whose value is == to value 
    Example : 
        3.0.0 :023 > h1.rassoc(2)
        => [:E, 2] 
    
    8.48) rehash : Rebuilds the hash table by recomputing the hash index for each key; returns self.
    Example :
        3.0.0 :027 > h1
        => {:E=>4, :F=>3} 
        3.0.0 :028 > h1.rehash
        => {:E=>4, :F=>3} 

    8.49) reject {|key,value|...} : Returns a new Hash object whose entries are all those from self for which the block returns false or nil.
    Example :
        3.0.0 :029 > h2
        => {:A=>1, :B=>2, :C=>3} 
        3.0.0 :030 > h2.reject{|key,value| value>=2}
        => {:A=>1} 
    
    8.50) reject! {|key,value|...} : Returns self, whose remaining entries are those for which the block returns false or nil.

    8.51) shift : Removes the first hash entry; returns a 2-element Array containing the removed key and value.
    Example :
        3.0.0 :036 > h1
        => {:E=>4, :F=>3, :A=>1} 
        3.0.0 :037 > h1.shift
        => [:E, 4] 
    
    8.52) slice(*keys) : Returns a new Hash object containing the entries for the given keys.
    Example :
        3.0.0 :040 > h1
        => {:F=>3, :A=>1, :B=>2} 
        3.0.0 :041 > h1.slice(:F,:B)
        => {:F=>3, :B=>2}
    
    8.53) store(key,value) : Associates the given value with the given key; returns value.
    Example :
        3.0.0 :042 > h1
        => {:F=>3, :A=>1, :B=>2} 
        3.0.0 :043 > h1.store(:F,4)
        => 4 

    8.54) to_a : Returns a new Array of 2-element Array objects; each nested Array contains a key-value pair from self.
    Example :
        3.0.0 :044 > h1
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :045 > h1.to_a
        => [[:F, 4], [:A, 1], [:B, 2]] 
    
    8.55) to_h / to_h {|key,value|...} : For an instance of Hash, returns self.
    Example :
        3.0.0 :046 > h1
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :047 > h=h1.to_h
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :048 > h
        => {:F=>4, :A=>1, :B=>2} 
    
    8.56) to_hash : Returns self.
    Example :
        3.0.0 :052 > h.to_hash
        => {:F=>4, :A=>1, :B=>2} 

    8.57) to_proc : Returns a Proc object that maps a key to its value.
    Example :
        3.0.0 :058 > h1
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :059 > proc=h1.to_proc
        => #<Proc:0x000055fca1b70f18 (lambda)> 
        3.0.0 :060 > proc.call(:B)
        => 2 

    8.58) transform_keys {|key| ... } → new_hash
          transform_keys(hash2) → new_hash
          transform_keys(hash2) {|other_key| ...} → new_hash
          transform_keys → new_enumerator 
        An optional hash argument can be provided to map keys to new keys. Any key not given will be mapped using the provided block, or remain the same if no block is given.
    Example :
        3.0.0 :061 > h1
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :062 > h1.transform_keys{|key| key.to_s}
        => {"F"=>4, "A"=>1, "B"=>2} 
    
    8.59) transform_keys! {|key| ... } → new_hash
          transform_keys!(hash2) → new_hash
          transform_keys!(hash2) {|other_key| ...} → new_hash
          transform_keys! → new_enumerator 
        Modify the original hash.
    
    8.60) transform_values {|value|...} : Returns a new Hash object.
    Example :
        3.0.0 :064 > h1
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :065 > h1.transform_values{|value| value*2}
        => {:F=>8, :A=>2, :B=>4} 
    
    8.61) transform_values! {|value|...} : Modify in original hash.

    8.62) values : Returns a new Array containing all values in self.
    Example :
        3.0.0 :066 > h1
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :067 > h1.values
        => [4, 1, 2] 
    
    8.63) values_at(*keys) : Returns a new Array containing values for the given keys.
    Example :
         3.0.0 :068 > h1
        => {:F=>4, :A=>1, :B=>2} 
        3.0.0 :069 > h1.values_at(:F,:B)
        => [4, 2] 

9. Date and Time : Ruby has Mainly three classes related to date and time in its documentation.
    A) Date
    B) DateTime
    C) Time

    Time Formatting Directives : These directives in the following table are used with the method Time.strftime.
    a) %a : The abbreviated weekday name (Sun).
    b) %A : The full weekday name (Sunday).
    c) %b : The abbreviated month name (Jan).
    d) %B : The full month name (January).
    e) %c : The preferred local date and time representation.
    f) %d : Day of the month (01 to 31).
    g) %H : Hour of the day, 24-hour clock (00 to 23).
    h) %I : Hour of the day, 12-hour clock (01 to 12).
    i) %j : Day of the year (001 to 366).
    j) %m : Month of the year (01 to 12).
    k) %M : Minute of the hour (00 to 59).
    l) %p : Meridian indicator (AM or PM).
    m) %S : Second of the minute (00 to 60).
    n) %U : Week number of the current year, starting with the first Sunday as the first day of the first week (00 to 53).
    o) %W : Week number of the current year, starting with the first Monday as the first day of the first week (00 to 53).
    p) %w : Day of the week (Sunday is 0, 0 to 6).
    q) %x : Preferred representation for the date alone, no time.
    r) %X : Preferred representation for the time alone, no date.
    s) %y : Year without a century (00 to 99).
    t) %Y : Year with century.
    u) %Z : Time zone name.
    v) %% : Literal % character.

    ** Public Class Methods Of Date Class **
    require 'date'

    9.A.1) _httpdate (string ,limit:128) : Returns a hash of values parsed from string, which should be a valid HTTP date format.
    Example :
        3.2.2 :006 > d=Date.new(2001,2,3)
        => #<Date: 2001-02-03 ((2451944j,0s,0n),+... 
        3.2.2 :007 > s=d.httpdate
        => "Sat, 03 Feb 2001 00:00:00 GMT" 
        3.2.2 :008 > Date._httpdate(s)
        => 
        {:wday=>6,
        :mday=>3,
        :mon=>2,
        :year=>2001,
        :hour=>0,
        :min=>0,
        :sec=>0,
        :zone=>"GMT",
        :offset=>0} 
    
    9.A.2) _iso8601(string, limit: 128) : Returns a hash of values parsed from string, which should contain an ISO 8601 formatted date.
    Example :
        3.2.2 :011 > d
        => #<Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)> 
        3.2.2 :012 > s=d.iso8601
        => "2001-02-03" 
        3.2.2 :013 > Date._iso8601(s)
        => {:mday=>3, :year=>2001, :mon=>2} 

    9.A.3) _jisx0301(string, limit: 128) : Returns a hash of values parsed from string, which should be a valid JIS X 0301 date format.
    Example :
        3.2.2 :014 > d
        => #<Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)> 
        3.2.2 :015 > s=d.jisx0301
        => "H13.02.03" 
        3.2.2 :016 > Date._jisx0301(s)
        => {:year=>2001, :mon=>2, :mday=>3} 

    9.A.4) _parse(string, comp = true, limit: 128) : Returns a hash of values parsed from string
    Example :
        3.2.2 :019 > Date._parse('2023-10-28')
        => {:year=>2023, :mon=>10, :mday=>28} 
    
    9.A.5) _rfc2822(string, limit: 128) or _rfc822 : Returns a hash of values parsed from string, which should be a valid RFC 2822 date format.
    Example :
        3.2.2 :020 > d
        => #<Date: 2001-02-03 ((2451944j,0s,0n),+0s,2299161j)> 
        3.2.2 :021 > s=d.rfc2822
        => "Sat, 3 Feb 2001 00:00:00 +0000" 
        3.2.2 :023 > Date._rfc2822(s)
        => 
        {:wday=>6,
        :mday=>3,
        :mon=>2,
        :year=>2001,
        :hour=>0,
        :min=>0,
        :sec=>0,
        :zone=>"+0000",
        :offset=>0} 
    
    9.A.6) _rfc3339(string, limit: 128) : Returns a hash of values parsed from string, which should be a valid RFC 3339 format.
    Example : 
        3.2.2 :027 > d=Date.new(2023,10,28)
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,229916... 
        3.2.2 :028 > s=d.rfc3339
        => "2023-10-28T00:00:00+00:00" 
        3.2.2 :029 > Date._rfc3339(s)
        => 
        {:year=>2023,
        :mon=>10,
        :mday=>28,
        :hour=>0,
        :min=>0,
        :sec=>0,
        :zone=>"+00:00",
        :offset=>0} 

    9.A.7) _strptime(string, format = '%F') : Returns a hash of values parsed from string according to the given format.
    Example :
        3.2.2 :031 > Date._strptime('2023-10-28','%Y-%m-%d')
        => {:year=>2023, :mon=>10, :mday=>28} 

    9.A.8) _xmlschema(string, limit: 128) : Returns a hash of values parsed from string, which should be a valid XML date format.
    Example :
        3.2.2 :032 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :033 > s=d.xmlschema
        => "2023-10-28" 
        3.2.2 :034 > Date._xmlschema(s)
        => {:year=>2023, :mon=>10, :mday=>28} 

    9.A.9) commercial(cwyear = -4712, cweek = 1, cwday = 1, start = Date::ITALY) : Returns a new Date object constructed from the arguments.
    Example :
        3.2.2 :040 > Date.commercial(2023,10,1).to_s
        => "2023-03-06" 

    9.A.10) gregorian_leap?(year) or Date.leap?(year) : Returns true if the given year is a leap year in the proleptic Gregorian calendar, false otherwise.
    Example :
        3.2.2 :041 > Date.gregorian_leap?(2000)
        => true 

    9.A.11) httpdate(string = 'Mon, 01 Jan -4712 00:00:00 GMT', start = Date::ITALY, limit: 128) : Returns a new Date object with values parsed from string, which should be a valid HTTP date format.
    Example :
        3.2.2 :054 > d=Date.new(2023,10,28)
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,229916... 
        3.2.2 :055 > s=d.httpdate
        => "Sat, 28 Oct 2023 00:00:00 GMT" 
        3.2.2 :056 > Date.httpdate(s)
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 

    9.A.12) jd(jd = 0, start = Date::ITALY) : Returns a new Date object formed from the arguments.
    Example :
        3.2.2 :081 > Date.jd(2458222).to_s
        => "2018-04-13" 

    9.A.13) jisx0301(string = '-4712-01-01', start = Date::ITALY, limit: 128) : Returns a new Date object with values parsed from string, which should be a valid JIS X 0301 format.
    Example :
        3.2.2 :082 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :083 > s=d.jisx0301
        => "R05.10.28" 
        3.2.2 :084 > Date.jisx0301
        => #<Date: -4712-01-01 ((0j,0s,0n),+0s,2299161j)> 
    
    9.A.14) julian_leap?(year) : Returns true if the given year is a leap year in the proleptic Julian calendar, false otherwise.
    Example :
        3.2.2 :086 > Date.julian_leap?(2000)
        => true 
    
    9.A.15) new(year = -4712, month = 1, mday = 1, start = Date::ITALY) or civil(*args) : Returns a new Date object constructed from the given arguments.
    Example :
        3.2.2 :089 > Date.new(2023,10,28).to_s
        => "2023-10-28" 

    9.A.16) ordinal(year = -4712, yday = 1, start = Date::ITALY) : Returns a new Date object formed fom the arguments.
    Example :   
        3.2.2 :092 > Date.ordinal.to_s
        => "-4712-01-01" 
    
    9.A.17) parse(string = '-4712-01-01', comp = true, start = Date::ITALY, limit: 128) :
    Returns a new Date object with values parsed from string
    Example :   
        3.2.2 :093 > Date.parse('2023-10-28')
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 

    9.A.18) strptime(string = '-4712-01-01', format = '%F', start = Date::ITALY) : Returns a new Date object with values parsed from string.
    Example :
        3.2.2 :097 > Date.parse('2023-10-28','%d-%m-%Y')
         => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)>

    9.A.19) today (start=Date::ITALY) : Returns a new Date object constructed from the present date.
    Example :   
        3.2.2 :098 > Date.today.to_s
        => "2023-10-28" 

    9.A.20) valid_civil?(year, month, mday, start = Date::ITALY) or valid_date? (year, month, mday, start = Date::ITALY) : Returns true if the arguments define a valid ordinal date, false otherwise.
    Example :   
        3.2.2 :100 > Date.valid_civil?(2023,10,28)
        => true 
    
    9.A.21) valid_commercial?(cwyear, cweek, cwday, start = Date::ITALY) : Returns true if the arguments define a valid commercial date, false otherwise.
    Example :
        3.2.2 :103 > Date.valid_commercial?(2023,4,28)
        => false 

    9.A.22) valid_jd?(jd, start = Date::ITALY) : Implemented for compatibility; returns true unless jd is invalid (i.e., not a Numeric).
    Example :   
        3.2.2 :104 > Date.valid_jd?(12371)
        => true 

    9.A.23) valid_ordinal?(year, yday, start = Date::ITALY) : Returns true if the arguments define a valid ordinal date, false otherwise.
    Example :   
        3.2.2 :105 > Date.valid_ordinal?(2023,256)
        => true 

    9.A.24) xmlschema(string = '-4712-01-01', start = Date::ITALY, limit: 128) : Returns a new Date object with values parsed from string, which should be a valid XML date format.
    Example :   
        3.2.2 :106 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :107 > s=d.xmlschema
        => "2023-10-28" 
        3.2.2 :108 > Date.xmlschema(s)
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 

    ** Public Instance Methods of Date Class **

    9.A.25) d+other : Returns a date object pointing other days after self. The other should be a numeric value. If the other is a fractional number, assumes its precision is at most nanosecond.
    Example :
        3.2.2 :110 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :111 > d+1
        => #<Date: 2023-10-29 ((2460247j,0s,0n),+0s,2299161j)> 
        3.2.2 :112 > 
    
    9.A.26) d- other : Returns the difference between the two dates if the other is a date object. If the other is a numeric value, returns a date object pointing other days before self.
    Example :   
        3.2.2 :112 > d-1
         => #<Date: 2023-10-27 ((2460245j,0s,0n),+0s,2299161j)> 

    9.A.27) d << n : Returns a new Date object representing the date n months earlier; n should be a numeric.
    Example :   
        3.2.2 :113 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :114 > d << 2
        => #<Date: 2023-08-28 ((2460185j,0s,0n),+0s,2299161j)>

    9.A.28) self <=> other : Compares self and other.
    Example :   
        3.2.2 :115 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :116 > d1=d<<2
        => #<Date: 2023-08-28 ((2460185j,0s,0n),+0s,2299161j)> 
        3.2.2 :117 > d <=> d1
        => 1

    9.A.29) self === other : Returns true if self and other represent the same date, false if not, nil if the two are not comparable.
    Example :   
        3.2.2 :118 > d===d1
        => false 

    9.A.30) d>>n : Returns a new Date object representing the date n months later; n should be a numeric.
    Example :   
        3.2.2 :120 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :121 > d>>2
        => #<Date: 2023-12-28 ((2460307j,0s,0n),+0s,2299161j)> 
        3.2.2 :122 > 
    
    9.A.31) ajd : Returns the astronomical Julian day number. This is a fractional number, which is not adjusted by the offset.
    Example :   
        3.2.2 :125 > Date.new(2023,10,28).ajd
        => (4920491/2) 

    9.A.32) amjd : Returns the astronomical modified Julian day number. This is a fractional number, which is not adjusted by the offset.
    Example :   
        3.2.2 :126 > Date.new(2023,10,28).amjd
         => (60245/1)

    9.A.33) asctime or ctime : Equivalent to strftime with argument '%a %b %e %T %Y' (or its shorthand form '%c').  
    Example :   
        3.2.2 :127 > Date.new(2023,10,28).asctime
        => "Sat Oct 28 00:00:00 2023" 

    9.A.34) cwday : Returns the commercial-date weekday index for self; 1 is Monday:
    Example :   
        3.2.2 :128 > Date.new(2023,10,28).cwday
         => 6 

    9.A.35) cweek : Returns commercial-date week index for self.
    Example :
        3.2.2 :129 > Date.new(2023,10,28).cweek
        => 43 
    
    9.A.36) cwyear : Returns commercial-date year for self.
    Example :   
        3.2.2 :130 > Date.new(2023,10,28).cwyear
        => 2023 

    9.A.37) day or mday : Returns the day of the month in range (1..31).
    Example :   
        3.2.2 :131 > Date.new(2023,10,28).day
        => 28 
    
    9.A.38) friday? : Returns true if self is a Friday, false otherwise.
    Example :   
        3.2.2 :019 > d=Date.new(2023,10,28)
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :020 > d.friday?
        => false 

    9.A.39) gregorian? : Returns true if the date is on or after the date of calendar reform, false otherwise.
    Example :   
        3.2.2 :022 > d.gregorian?
        => true 

    9.A.40) httpdate : Equivalent to strftime with argument '%a, %d %b %Y %T GMT'.
    Example :   
        3.2.2 :023 > d.httpdate
        => "Sat, 28 Oct 2023 00:00:00 GMT" 

    9.A.41) infinite? : Returns false.
    Example :   
        3.2.2 :024 > d.infinite?
        => false 

    9.A.42) inspect : Returns a string representation of self.
    Example :
        3.2.2 :025 > d.inspect
         => "#<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)>" 

    9.A.43) iso8601 or xmlschema : Equivalent to strftime with argument '%Y-%m-%d'.
    Example :
        3.2.2 :026 > d.iso8601
        => "2023-10-28" 

    9.A.44) jd : Returns the Julian day number. This is a whole number, which is adjusted by the offset as the local time.
    Example :   
        3.2.2 :032 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :033 > d.jd
        => 2460246 

    9.A.45) jisx0301 : Returns a string representation of the date in self in JIS X 0301 format.
    Example :   
        3.2.2 :034 > d.jisx0301
         => "R05.10.28" 

    9.A.46) julian? : Returns true if the date is before the date of calendar reform, false otherwise.
    Example :   
        3.2.2 :035 > d.julian?
        => false 

    9.A.47) ld : Returns the Lilian day number, which is the number of days since the beginning of the Gregorian calendar, October 15, 1582.
    Example :
        3.2.2 :040 > d.ld
        => 161086 

    9.A.48) leap? : Returns true if the year is a leap year, false otherwise.
    Example :   
        3.2.2 :041 > d.leap?
        => false 

    9.A.49) mjd : Returns the modified Julian day number. This is a whole number, which is adjusted by the offset as the local time.
    Example :   
        3.2.2 :043 > d.mjd
        => 60245 

    9.A.50) mon or month : Returns the month in range (1..12).
    Example :   
        3.2.2 :044 > d.mon
        => 10

    9.A.51) new_start(start = Date::ITALY]) : Returns a copy of self with the given start value.
    Example :
        3.2.2 :050 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :051 > d0=d.new_start(Date::JULIAN)
        => #<Date: 2023-10-15 ((2460246j,0s,0n),+0s,Infj)> 
        3.2.2 :052 > d0.julian?
        => true 
    
    9.A.52) next or succ : Returns a new Date object representing the following day.
    Example :  
        3.2.2 :054 > d.to_s
        => "2023-10-28" 
        3.2.2 :055 > d.next.to_s
        => "2023-10-29" 

    9.A.53) next_day, next_month, next_year : Returns a copy of self with increment in respective terms.

    9.A.54) prev_day, prev_month, prev_year : Returns a copy of self with one decrement in respective terms.

    9.A.55) rfc2822 or rfc822 : Equivalent to strftime with argument '%a, %-d %b %Y %T %z'.
    Example :   
        3.2.2 :056 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :057 > d.rfc2822
        => "Sat, 28 Oct 2023 00:00:00 +0000" 
    
    9.A.56) rfc3339 : Equivalent to strftime with argument '%FT%T%:z'
    Example :   
        3.2.2 :058 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :059 > d.rfc3339
        => "2023-10-28T00:00:00+00:00" 

    9.A.57) step(limit,step=1){|date|...} : Calls the block with specified dates; returns self.
    Example :
        3.2.2 :060 > limit=Date.new(2023,10,28)
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :061 > Date.new(2023).step(limit){|date| p date.to_s 
        if date.mday==31}
        "2023-01-31"
        "2023-03-31"
        "2023-05-31"
        "2023-07-31"
        "2023-08-31"
        => #<Date: 2023-01-01 ((2459946j,0s,0n),+0s,2299161j)> 

    9.A.58) strftime : Returns a string representation of the date in self, formatted according the given format.
    Example :
        3.2.2 :062 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :063 > d.strftime
        => "2023-10-28" 

    9.A.59) to_date : Returns self.
    Example :   
        3.2.2 :064 > d.to_date
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 

    9.A.60) to_datetime : Returns a DateTime whose value is the same as self.
    Example :   
        3.2.2 :065 > d.to_datetime
         => #<DateTime: 2023-10-28T00:00:00+00:00 ((2460246j,0s,0n),+0s,2299161j)> 

    9.A.61) to_s : Returns a string representation of the date in self in ISO 8601 extended date format ('%Y-%m-%d').
    Example :   
        3.2.2 :066 > d.to_s
         => "2023-10-28" 

    9.A.62) to_time : Returns a new Time object with the same value as self.
    Example :
        3.2.2 :067 > d.to_time
         => 2023-10-28 00:00:00 +0530 

    9.A.63) wday : Returns the day of week in range (0..6); Sunday is 0.
    Example :   
        3.2.2 :073 > d
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 
        3.2.2 :074 > d.wday
        => 6 
    
    9.A.64) yday : Returns the day of the year, in range (1..366).
    Example :   
        3.2.2 :075 > d.yday
        => 301 

    9.A.65) year : Returns the year.
    Example :   
        3.2.2 :076 > d.year
        => 2023 
    
    9.A.66) strptime : Returns a new Date object with values parsed from string.
    Example :
        3.2.2 :095 > d
        => "2023-10-28" 
        3.2.2 :096 > Date.strptime
        => #<Date: -4712-01-01 ((0j,0s,0n),+0s,2299161j)> 
        3.2.2 :097 > Date.strptime(d,"%Y-%m-%d")
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 

    ** Public Class Methods Of DateTime Class ** 
    require 'date'

    9.B.1) _strptime(string[, format='%FT%T%z']) : Parses the given representation of date and time with the given template, and returns a hash of parsed elements.
    Example :
        3.2.2 :005 > d=DateTime.new(2023,10,28,1,2,3).to_s
        => "2023-10-28T01:02:03+00:00" 
        3.2.2 :006 > Date._strptime(d,"%Y-%m-%d")
        => {:year=>2023, :mon=>10, :mday=>28, :leftover=>"T01:02:03+00:00"} 

    9.B.2) commercial([cwyear=-4712[, cweek=1[, cwday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]]]) : Creates a DateTime object denoting the given week date.
    Example :
        3.2.2 :007 > DateTime.commercial(2023)
         => #<DateTime: 2023-01-02T00:00:00+00:00 ((2459947j,0s,0n),+0s,2299161j)> 
    
    9.B.3) httpdate(string='Mon, 01 Jan -4712 00:00:00 GMT'[, start=Date::ITALY]) : Creates a new DateTime object by parsing from a string according to some RFC 2616 format.
    Example :
        3.2.2 :010 > DateTime.httpdate('Sat, 28 Oct 2023 03:30:04 GMT')
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)>
    
    9.B.4) iso8601(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY], limit: 128) : Creates a new DateTime object by parsing from a string according to some typical ISO 8601 formats.
    Example :
        3.2.2 :011 > d
        => "2023-10-28T01:02:03+00:00" 
        3.2.2 :012 > DateTime.iso8601(d)
        => #<DateTime: 2023-10-28T01:02:03+00:00 ((2460246j,3723s,0n),+0s,2299161j)> 

    9.B.5) jd([jd=0[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]) :
    Creates a DateTime object denoting the given chronological Julian day number.
    Example :   
    3.2.2 :013 > DateTime.jd(2437473)
     => #<DateTime: 1961-06-22T00:00:00+00:00 ((2437473j,0s,0n),+0s,2299161j)> 

    9.B.6) jisx0301(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY], limit: 128) :
    Creates a new DateTime object by parsing from a string according to some typical JIS X 0301 formats.
    Example :
        3.2.2 :014 > DateTime.jisx0301(d)
        => #<DateTime: 2023-10-28T01:02:03+00:00 ((2460246j,3723s,0n),+0s,2299161j)>

    9.B.7) new(*args) or civil(*args) : To create new object of DateTime class.
    Example :
        3.2.2 :016 > DateTime.new(2023,10,28,1,2,3)
         => #<DateTime: 2023-10-28T01:02:03+00:00 ((2460246j,3723s,0n),+0s,2299161j)> 

    9.B.8) now([start=Date::ITALY]) : Creates a DateTime object denoting the present time.
    Example :
    3.2.2 :017 > DateTime.now
    => #<DateTime: 2023-10-28T15:53:27+05:30 ((2460246j,37407s,215559293n),+19800s,2299161j)>

    9.B.9) ordinal([year=-4712[, yday=1[, hour=0[, minute=0[, second=0[, offset=0[, start=Date::ITALY]]]]]]]) : Creates a DateTime object denoting the given ordinal date.
    Example :
        3.2.2 :018 > DateTime.ordinal(2023,45)
        => #<DateTime: 2023-02-14T00:00:00+00:00 ((2459990j,0s,0n),+0s,2299161j)>

    9.B.10) parse(string='-4712-01-01T00:00:00+00:00'[, comp=true[, start=Date::ITALY]], limit: 128) : Parses the given representation of date and time, and creates a DateTime object.
    Example :   
        3.2.2 :022 > DateTime.parse(d)
         => #<DateTime: 2023-10-28T01:02:03+00:00 ((2460246j,3723s,0n),+0s,2299161j)> 

    9.B.11) rfc2822(string='Mon, 1 Jan -4712 00:00:00 +0000'[, start=Date::ITALY], limit: 128) 
    rfc822(string='Mon, 1 Jan -4712 00:00:00 +0000'[, start=Date::ITALY], limit: 128) :
    Creates a new DateTime object by parsing from a string according to some typical RFC 2822 formats. 
    Example :
        3.2.2 :024 > d1=DateTime.rfc2822('Sat, 28 Oct 2023 03:30:04 GMT')
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 
    
    9.B.12) rfc3339(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY], limit: 128) :
    Example :   
        3.2.2 :025 > DateTime.rfc3339(d)
         => #<DateTime: 2023-10-28T01:02:03+00:00 ((2460246j,3723s,0n),+0s,2299161j)> 

    9.B.13) strptime([string='-4712-01-01T00:00:00+00:00'[, format='%FT%T%z'[ ,start=Date::ITALY]]]) : Parses the given representation of date and time with the given template, and creates a DateTime object.
    Example :   
        3.2.2 :027 > DateTime.strptime(d,'%Y-%m-%dT%H:%M:%S%z')
        => #<DateTime: 2023-10-28T01:02:03+00:00 ((2460246j,3723s,0n),+0s,2299161j)> 

    9.B.14) xmlschema(string='-4712-01-01T00:00:00+00:00'[, start=Date::ITALY], limit: 128) :
    Creates a new DateTime object by parsing from a string according to some typical XML Schema formats.
    Example :
        3.2.2 :028 > DateTime.xmlschema(d)
        => #<DateTime: 2023-10-28T01:02:03+00:00 ((2460246j,3723s,0n),+0s,2299161j)> 

    ** Public Instance Methods of DateTime Class **

    9.B.15) hour : Returns the hour in range (0..23).
    Example :
        3.2.2 :031 > d1=DateTime.rfc2822('Sat, 28 Oct 2023 03:30:04 GMT')
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 
        3.2.2 :032 > d1.hour
        => 3 

    9.B.16) iso8601([n=0]) or xmlschema : This method is equivalent to strftime(‘%FT%T%:z’). The optional argument n is the number of digits for fractional seconds.
    Example :   
        3.2.2 :034 > d1.iso8601(2)
        => "2023-10-28T03:30:04.00+00:00" 
    
    9.B.17) jisx0301([n=0]) : Returns a string in a JIS X 0301 format. The optional argument n is the number of digits for fractional seconds.
    Example :
        3.2.2 :036 > d1.jisx0301(4)
        => "R05.10.28T03:30:04.0000+00:00" 

    9.B.18) min or minute : Returns the minute in range (0..59).
    Example :
        3.2.2 :037 > d1.min
        => 30 

    9.B.19) new_offset([offset=0]) : Duplicates self and resets its offset.
    Example :
        3.2.2 :040 > d1
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 
        3.2.2 :041 > d1.new_offset('+7:00')
        => #<DateTime: 2023-10-28T10:30:04+07:00 ((2460246j,12604s,0n),+25200s,2299161j)> 

    9.B.20) offset : Returns the offset.
    Example :   
        3.2.2 :042 > d1.offset
        => (0/1) 

    9.B.21) rfc3339([n=0]) : This method is equivalent to strftime(‘%FT%T%:z’). The optional argument n is the number of digits for fractional seconds.
    Example :
        3.2.2 :043 > d1.rfc3339(4)
        => "2023-10-28T03:30:04.0000+00:00" 

    9.B.22) sec or second : Returns the second in range (0..59).
    Example :   
        3.2.2 :044 > d1
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 
        3.2.2 :045 > d1.sec
        => 4 

    9.B.23) sec_fraction or second_fraction : Returns the fractional part of the second in range (Rational(0, 1)…Rational(1, 1)).
    Example :
        3.2.2 :046 > d1
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 
        3.2.2 :047 > d1.second_fraction
        => (0/1)
    
    9.B.24) strftime(format = '%FT%T%:z') : Returns a string representation of self, formatted according the given +format.
    Example :
        3.2.2 :048 > d1.strftime
        => "2023-10-28T03:30:04+00:00" 
        3.2.2 :049 > d1.strftime('%Y/%m/%d')
        => "2023/10/28" 
    
    9.B.25) to_date : Returns a Date object which denotes self.
    Example :
        3.2.2 :050 > d1
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 
        3.2.2 :051 > d1.to_date
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 

    9.B.26) to_datetime : Returns self.
    Example :
        3.2.2 :053 > d1.to_datetime
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 

    9.B.27) to_s : Returns a string in an ISO 8601 format.
    Example :
        3.2.2 :054 > d1.to_s
        => "2023-10-28T03:30:04+00:00" 

    9.B.28) to_time : Returns a Time object which denotes self.
    Example :
        3.2.2 :055 > d1
        => #<DateTime: 2023-10-28T03:30:04+00:00 ((2460246j,12604s,0n),+0s,2299161j)> 
        3.2.2 :056 > d1.to_time
        => 2023-10-28 03:30:04 +0000 

    9.B.29) zone : Returns the timezone.
    Example :
        3.2.2 :057 > d1.zone
        => "+00:00" 

    ** Public Methods Of Class Time **
    require 'time'

    9.C.1) to_date : Returns a Date object which denotes self.
    Example : 
        3.2.2 :081 > t=Time.new
        => 2023-10-28 13:23:24.157519961 +0530 
        3.2.2 :082 > t.to_date
        => #<Date: 2023-10-28 ((2460246j,0s,0n),+0s,2299161j)> 

    9.C.2) to_datetime : Returns a DateTime object which denotes self.
    Example :
        3.2.2 :083 > t
        => 2023-10-28 13:23:24.157519961 +0530 
        3.2.2 :084 > t.to_datetime
      => #<DateTime: 2023-10-28T13:23:24+05:30 ((2460246j,28404s,157519961n),+19800s,2299161j)> 

    9.C.3) to_time : Returns self.
    Example :   
        3.2.2 :085 > t=Time.now
        => 2023-10-28 13:25:38.252212898 +0530 
        3.2.2 :086 > t.to_time
        => 2023-10-28 13:25:38.252212898 +0530
    
    9.C.4) ::new or ::now : Returns the current time.
    Example :
        3.2.2 :002 > Time.new
        => 2023-10-28 16:39:04.03519311 +0530 

    9.C.5) inspect : Returns the time in string representation.
    Example :   
         3.2.2 :004 > Time.now.inspect
         => "2023-10-28 16:41:20.272657638 +0530" 

    9.C.6) Components of Date and Time :
        a) year -> Year of the date
        b) month -> Month of the date.
        c) day -> Day of the date (1 to 31).
        d) wday -> Day of week (Sunday - 0)
        e) yday -> Day of Year (365)
        f) hour -> 24 hour clock
        g) min -> minutes 
        h) sec -> seconds 
        i) usec -> microseconds 
        j) zone -> timezone name ("UTC")
    Example :
        3.2.2 :006 > time=Time.new
        => 2023-10-28 16:52:42.123230322 +0530 
        3.2.2 :007 > time.year
        => 2023 
        3.2.2 :008 > time.month
        => 10 
        3.2.2 :009 > time.day
        => 28 
        3.2.2 :010 > time.wday
        => 6 
        3.2.2 :011 > time.yday
        => 301 
        3.2.2 :012 > time.hour
        => 16 
        3.2.2 :013 > time.min
        => 52 
        3.2.2 :014 > time.sec
        => 42 
        3.2.2 :015 > time.usec
        => 123230 
        3.2.2 :016 > time.zone
        => "IST" 

    9.C.7) strftime : To format date and time.
    Example :
        3.2.2 :017 > time
        => 2023-10-28 16:52:42.123230322 +0530 
        3.2.2 :018 > time.strftime("%Y-%m-%d %H:%M:%S")
        => "2023-10-28 16:52:42" 

    9.C.8) utc? : If time is in UTC time zone.
    Example :   
        3.2.2 :019 > time.utc?
        => false 
    
    9.C.9) localtime : Convert to local time zone.
    Example :
        3.2.2 :022 > time.localtime
         => 2023-10-28 16:52:42.123230322 +0530 

    9.C.10) gmtime : Convert back to UTC.
    Example :
        3.2.2 :024 > time
        => 2023-10-28 16:52:42.123230322 +0530 
        3.2.2 :025 > time.gmtime
        => 2023-10-28 11:22:42.123230322 UTC 

    9.C.11) getlocal : Return a new time object in local zone.
    Example :
        3.2.2 :029 > time
        => 2023-10-28 11:22:42.123230322 UTC 
        3.2.2 :030 > time.getlocal
        => 2023-10-28 16:52:42.123230322 +0530 
    
    9.C.12) getutc : Return a new Time object in UTC.
    Example :
        3.2.2 :034 > t
        => 2023-10-28 16:52:42.123230322 +0530 
        3.2.2 :035 > t.getutc
        => 2023-10-28 11:22:42.123230322 UTC 

10. Ranges : It represents a set of values with a beginning and an end. The ranges which has .. in them, run from beginning to end inclusively. The ranges which has ... in them, run exclusively the end value.
    Ruby has a variety of ways to define ranges.
    a) Ranges as sequences : The most natural way to define a range is in sequence. They have a start point and an end point. 
    b) Ranges as conditions : Ranges are also defined as conditional expressions. Different conditions are defined in a set of lines. These conditions are enclosed within start statement and end statement.
    c) Ranges as intervals : Intervals are represented by === case equality operator.
    d) Reverse range : Ruby reverse range operator does not return any value. We can use reverse function of ruby to reverse the range.

11. Iterators : Iterator is a concept used in object-oriented language. Iteration means doing one thing many times like a loop.
    a) Each Iterator :The Ruby each iterator returns all the elements from a hash or array.
        Syntax : (collection).each do |variable|
                    --code--
                 end
    b) Times Iterator : A loop is executed specified number of times by the times iterator. Loop will start from zero till one less than specified number.
        Syntax : x.times do |variable|
                    --code--
                 end
    c) Step Iterator : A step iterator is used to iterate while skipping over a range.
        Syntax : (controller).step(<step-count>) do |variable|
                    --code--
                 end
    d) Each line operator : A each_line iterator is used to iterate over a new line in a string.
        Syntax : <string with\n>.each_line do |variable|
                    --code--
                 end
    e) Upto Iterator : An upto iterator iterates from number x to number y.
        Syntax : x.upto(y) do |variable|
                    --code--
                 end
    f) Downto iterator : An downto iterator iterates from number y to number x.
        Syntax : y.downto(x) do |variable|
                    --code--
                 end
    
12. File I/O : Ruby I/O is a way to interact with your system. IO class is the basis for all input and output in Ruby. 
    Common modes in I/O port
    a) "r": read-only mode is the default mode starts at beginning of file.
    b) "r+": read-write mode, starts at beginning of file.
    c) "w": write-only mode, either creates a new file or truncates an existing file for writing.
    d) "w+": read-write mode, either creates a new file or truncates an existing file for reading and writing.
    e) "a": write-only mode, if file exists it will append the file othrwise a new file will be created for writing only.
    f) "a+": read and write mode, if file exists it will append the file othrwise a new file will be created for writing and reading.

    A) Opening a file : There are two methods to open a file in ruby.
    A.1) File.new method : Using this method a new file can be created for reading, writing or both.
        Syntax : f=File.new("filename.rb")

    A.2) File.open method : Using this method a new file object is created. That file object is assigned to a file.
        Syntax : File.open("filename.rb","mode") do |f|
    
    B) Reading a file : There are three different methods to read a file.
    B.1) To return a single line, following syntax is used.
        Syntax : f.gets
                 --code--
    B.2) To return the whole file after the current position.
        Syntax : f.read
                    --code--
    B.3) To return file as an array of lines
        Syntax : f.readlines  
                    --code--
    B.4) Sysread method : The sysread method is also used to read the content of a file. With the help of this method you can open a file in any mode.  

    C) Renaming and Deleting of a file : Ruby files are renamed using rename method and deleted using delete mehtod.
    C.1) Rename : Syntax : File.rename("olderName.txt", "newName.txt")  
    C.2) Delete : Syntax : File.delete("filename.txt")  

    D) Writing in a file : You can write content into a file. File needs to be opened in write mode for this method.

13. Directories : Class Dir has directory streams as objects which represents directories in underlying file system. Directories are handled with Dir class.
    
    a) Creating a directory : To create a directory mkdir command is used. You can give permission to a directory if you want (optional).
        Syntax: Dir.mkdir "directory-name",permission
    b) Checking directory : To check whether a directory exists or not exist? Method is used.
        Syntax : Dir.exist?"directory-name"
    c) Current working directory : To know the current working directory pwd method is used.
        Syntax : Dir.pwd
    d) Remove directory : To remove a directory, rmdir, unlink or delete methods are used. They perform same function for a Ruby directory.
        Syntax : Dir.rmdir "directory-name"

14. Exceptions : In a Ruby program, when something goes wrong, it throws an exceptional behavior. By default Ruby program terminates on throwing an exception.

15. OOPS Concept : Ruby is a true object oriented language which can be embedded into Hypertext Markup Language. Everything in Ruby is an object. OOPs is a programming concept that uses objects and their interactions to design applications and computer programs. There are four basic concepts in OOPS :

    a) Encapsulation: It hides the implementation details of a class from other objects due to which a class is unavailable to the rest of the code. Its main purpose is to protect data from data manipulation.

    b) Polymorphism: It is the ability to represent an operator or function in different ways for different data input.

    c) Inheritance: It creates new classes from pre defined classes. New class inherit behaviors of its parent class which is referred as superclass. In this way, pre defined classes can be made more reusable and useful.

    d) Abstraction: It hides the complexity of a class by modelling classes appropriate to the problem.

16. Constructor : A constructor is automatically called when an object is created. They do not return any values. In Ruby, they are called initialize.
    Syntax : class <ClassName>
                def initialize
                    --code--
                end
             end   
    
17. Regular Expressions : A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings using a specialized syntax held in a pattern.
    Syntax : /search-string/

    a) [ab] : [ab] means a or b. It is the opposite of /ab/ which means a and b.
    Example :
        3.2.2 :038 > /[hl]/.match(str)
        => #<MatchData "l"> 

    b)[a-d] : [a-d] is equivalent to [abcd]. The hyphen (-) character class represents range of characters.
    Example : 
        3.2.2 :040 > /H[a-e]llo/.match(str)
        => #<MatchData "Hello"> 

    c) [^a-d] : The ^ sign represents any other character which is not present in the range.
    Example :
        3.2.2 :041 > str
        => "Hello World" 
        3.2.2 :042 > /[^a-e]/.match(str)
        => #<MatchData "H"> 
        3.2.2 :043 > /[^a-e]ello/.match(str)
        => #<MatchData "Hello"> 

    d) Quantifiers : Characters defined till now match a single character. With the help of repetition metacharacter, we can specify how many times they need to occur. These meta characters are called quantifiers.
        
    d.1) * : Zero or more times
    d.2) + : One or more times
    d.3) ? : Zero or one times (optional)
    d.4) {n} : Exactly n times
    d.5) {n, } : n or more times
    d.6) {,m} : m or less times
    d.7) {n,m} : At least n and at most m times 

** Public Instance Methods **

    17.1) == or eql? : Returns true if object is another Regexp whose pattern, flags, and encoding are the same as self, false otherwise.
    Example :
        3.2.2 :001 > /foo/==Regexp.new("foo")
        => true 

    17.2) === : Returns true if self finds a match in string.
    Example :   
        3.2.2 :002 > /foo/==="FOO"
        => false 
    
    17.3) =~ : Returns the integer index (in characters) of the first match for self and string, or nil if none.
    Example :
        3.2.2 :004 > str="Hello World"
        => "Hello World" 
        3.2.2 :005 > regex=Regexp.new("o")
        => /o/ 
        3.2.2 :006 > regex =~ str
        => 4 

    17.4) casefold? : Returns true if the case-insensitivity flag in self is set, false otherwise.
    Example :
        3.2.2 :010 > /o/i.casefold?
        => true 

    17.5) encoding : Returns the Encoding object that represents the encoding of obj.
    Example :
        3.2.2 :011 > regex
        => /o/ 
        3.2.2 :012 > regex.encoding
        => #<Encoding:US-ASCII> 

    17.6) fixed_encoding? : Returns false if self is applicable to a string with any ASCII-compatible encoding; otherwise returns true.
    Example :
        3.2.2 :013 > regex
        => /o/ 
        3.2.2 :014 > regex.fixed_encoding?
        => false 

    17.7) hash : Returns the integer hash value for self.
    Example :
        3.2.2 :015 > regex.hash
        => -2088558671161935805 

    17.8) inspect or to_s: Returns a nicely-formatted string representation of self.
    Example :
        3.2.2 :016 > regex
        => /o/ 
        3.2.2 :017 > regex.inspect
        => "/o/" 
    
    17.9) match(string, offset = 0) → matchdata or nil
        match(string, offset = 0) {|matchdata| ... } → object
        With no block given, returns the MatchData object that describes the match, if any, or nil if none; the search begins at the given character offset in string.
    Example :
        3.2.2 :019 > regex=Regexp.new("Hello")
        => /Hello/ 
        3.2.2 :020 > regex.match("Hell")
        => nil 
        3.2.2 :021 > regex.match("Hello")
        => #<MatchData "Hello">
    
    17.10)  match?(string) → true or false
    match?(string, offset = 0) → true or false
    Returns true or false to indicate whether the regexp is matched or not without updating $~ and other related variables. 
    Example :
        3.2.2 :022 > regex.match?("Hello")
        => true 
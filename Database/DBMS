1. Definition of DBMS -> Database Management System or DBMS in short refers to the technology of storing and retrieving users data with utmost efficiency along with appropriate security measures. 

2. Database -> It is a collection of related data and data is a collection of facts and figures     that can be processed to produce information.

3. Architecture -> It is a 3-tier architecture.

                Presentation Tier
                      |
                Application Tier
                      |
                Database Tier

4. Data models -> It define how data is connected to each other and how they are processed and stored inside the system.

5. Super Key −> A set of attributes (one or more) that collectively identifies an entity in an entity set.

6. Candidate Key −> A minimal super key is called a candidate key. An entity set may have more than one candidate key.

7. Primary Key −> A primary key is one of the candidate keys chosen by the database designer to uniquely identify the entity set.

8. E-R Diagram Representation :-
      a) Entities are represented by means of rectangles.
      b) Attributes are represented by means of ellipses.
      c) Composite attributes are represented by ellipses that are connected with an ellipse.
      d) Multivalued attributes are depicted by double ellipse.
      e) Derived attributes are depicted by dashed ellipse.

9. Generalization -> In this, a number of entities are brought together into one generalized entity based on their similar characteristics.

10. Specialization -> In specialization, a group of entities is divided into sub-groups based on their characteristics. 

11. Relation Data Model Concepts :-

      a) Tables − In relational data model, relations are saved in the format of Tables. This format stores the relation among entities. A table has rows and columns, where rows represents records and columns represent the attributes.

      b) Tuple − A single row of a table, which contains a single record for that relation is called a tuple.

      c) Relation instance − A finite set of tuples in the relational database system represents relation instance. Relation instances do not have duplicate tuples.

      d) Relation schema − A relation schema describes the relation name (table name), attributes, and their names.

      e) Relation key − Each row has one or more attributes, known as relation key, which can identify the row in the relation (table) uniquely.

      f) Attribute domain − Every attribute has some pre-defined value scope, known as attribute domain.

12. Data Independence : Two types of data independence are->
      a) Logical Data Independence - It is a kind of mechanism , which liberalizes itself from actual data stored on the disk. 
      b) Physical Data Independence - Physical data independence is the power to change the physical data without impacting the schema or logical data.

13. Alternative key : A set of keys which are from candidate keys set after neglecting primary key.

14. Foreign Key : It is an attribute or set of attributes that references to primary key of same table or another table(relation). There can be more than one foreign key in a table.

      Referential Integrity :
      
                  Referenced Table (Base Table)
      Operations -> Insertion (No violation)
                    Deletion (May cause violation)
                    Updation (May cause violation)
                  
                  Referencing Table (Child Table)
      Operations -> Insertion (May cause violation)
                    Deletion (No violation)
                    Updation (May cause violation)

15. Normalization : Normalization is a method to remove all these anomalies and bring the database to a consistent state.

      1st normal form : Table should not contain multivalued attribute.
      2nd normal form : a) Table or relation must be in 1NF.
                        b) All the non-prime attributes should be fully functional dependent on candidate key.
                        There should be no partial dependency in a relation.
      3rd normal form : a) Table must be in 2NF.
                        b) There should be no transitive dependency in a table.
      Boyce Codd normal form : a) Table must be in 3NF.
                              b) For any non-trivial functional dependency, X → A, X must be a super-key.

16. Joins : Join is a combination of a Cartesian product followed by a selection process. A Join operation pairs two tuples from different relations, if and only if a given join condition is satisfied.
      
      a) Natural Join : Natural join does not use any comparison operator. It does not concatenate the way a Cartesian product does. We can perform a Natural Join only if there is at least one common attribute that exists between two relations. In addition, the attributes must have the same name and domain.
      
      b) Self Join : A self join is a specific type of SQL join where a table is joined with itself. This is often used when you want to combine rows with other rows in the same table, typically when those rows have a relationship with each other. 

      c) Equi Join : An equi join returns rows that have matching values in the specified columns from each table.

      d) Left Outer Join : It gives the matching rows and the rows which are in left table but not in right table. 

      e) Right Outer Join : It gives the matching rows and the rows which are in the right table but not in the left table. 

      f) Full Outer Join : All the tuples from both participating relations are included in the resulting relation. If there are no matching tuples for both relations, their respective unmatched attributes are made NULL.

17. Indexing :
      Why is it used?
      It is used to reduce block operations from CPU (I/O operations). It helps to achieve cost efficiency and also saves a lot of time.

      Indexing is of following types :
      a) Primary Index − Primary index is defined on an ordered data file. The data file is ordered on a key field. The key field is generally the primary key of the relation.

      b) Secondary Index − Secondary index may be generated from a field which is a candidate key and has a unique value in every record, or a non-key with duplicate values.

      c) Clustering Index − Clustering index is defined on an ordered data file. The data file is ordered on a non-key field.

      Ordered indexing is of two types :
      a) Dense Index -> In dense index, there is an index record for every search key value in the database. This makes searching faster but requires more space to store index records itself.
      b) Sparse Index -> In sparse index, index records are not created for every search key. An index record here contains a search key and an actual pointer to the data on the disk.

      B+ tree : A B+ tree is a balanced binary search tree that follows a multi-level index format. The leaf nodes of a B+ tree denote actual data pointers. B+ tree ensures that all leaf nodes remain at the same height, thus balanced.

18. Hashing : Hashing uses hash functions with search keys as parameters to generate the address of a data record.
      Two types of hashing are :
      a) Static Hashing : In static hashing, when a search-key value is provided, the hash function always computes the same address. 

      Bucket Overflow :

      Overflow Chaining − When buckets are full, a new bucket is allocated for the same hash result and is linked after the previous one. This mechanism is called Closed Hashing.

      Linear Probing − When a hash function generates an address at which data is already stored, the next free bucket is allocated to it. This mechanism is called Open Hashing.

      b) Dynamic Hashing : Dynamic hashing provides a mechanism in which data buckets are added and removed dynamically and on-demand. Dynamic hashing is also known as extended hashing.

19. Transaction : A transaction can be defined as a group of tasks. A single task is the minimum processing unit which cannot be divided further.  A transaction in a database system must maintain Atomicity, Consistency, Isolation, and Durability − commonly known as ACID properties − in order to ensure accuracy, completeness, and data integrity.

      ACID Properties :
      a) Atomicity − This property states that a transaction must be treated as an atomic unit, that is, either all of its operations are executed or none. There must be no state in a database where a transaction is left partially completed. States should be defined either before the execution of the transaction or after the execution/abortion/failure of the transaction.

      b) Consistency − The database must remain in a consistent state after any transaction. No transaction should have any adverse effect on the data residing in the database. If the database was in a consistent state before the execution of a transaction, it must remain consistent after the execution of the transaction as well.

      c) Durability − The database should be durable enough to hold all its latest updates even if the system fails or restarts. If a transaction updates a chunk of data in a database and commits, then the database will hold the modified data. If a transaction commits but the system fails before the data could be written on to the disk, then that data will be updated once the system springs back into action.
      
      d) Isolation − In a database system where more than one transaction are being executed simultaneously and in parallel, the property of isolation states that all the transactions will be carried out and executed as if it is the only transaction in the system. No transaction will affect the existence of any other transaction.

      States of Transaction :
      
      a) Active − In this state, the transaction is being executed. This is the initial state of every transaction.

      b) Partially Committed − When a transaction executes its final operation, it is said to be in a partially committed state.

      c) Failed − A transaction is said to be in a failed state if any of the checks made by the database recovery system fails. A failed transaction can no longer proceed further.

      d) Aborted − If any of the checks fails and the transaction has reached a failed state, then the recovery manager rolls back all its write operations on the database to bring the database back to its original state where it was prior to the execution of the transaction. Transactions in this state are called aborted. The database recovery module can select one of the two operations after a transaction aborts −
            Re-start the transaction
            Kill the transaction
      
      e)Committed − If a transaction executes all its operations successfully, it is said to be committed. All its effects are now permanently established on the database system.

20. Concurrency control : In a multiprogramming environment where multiple transactions can be executed simultaneously, it is highly important to control the concurrency of transactions. We have concurrency control protocols to ensure atomicity, isolation, and serializability of concurrent transactions.
Concurrency control protocols can be broadly divided into two categories −
      a) Lock based protocols : Database systems equipped with lock-based protocols use a mechanism by which any transaction cannot read or write data until it acquires an appropriate lock on it.
      b)Time stamp based protocols : Lock-based protocols manage the order between the conflicting pairs among transactions at the time of execution, whereas timestamp-based protocols start working as soon as a transaction is created.

21. Deadlock : Deadlock is an unwanted situation that arises in a shared resource environment, where a process indefinitely waits for a resource that is held by another process.

22. Transaction Failure : A transaction has to abort when it fails to execute or when it reaches a point from where it can’t go any further. This is called transaction failure where only a few transactions or processes are hurt.

      Reasons of transaction failure :
      a) Logical errors − Where a transaction cannot complete because it has some code error or any internal error condition.

      b) System errors − Where the database system itself terminates an active transaction because the DBMS is not able to execute it, or it has to stop because of some system condition.

23. Log based recovery : Log is a sequence of records, which maintains the records of actions performed by a transaction. It is important that the logs are written prior to the actual modification and stored on a stable storage media, which is failsafe.
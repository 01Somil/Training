*****PostgreSQL commands*****

** DATABASE**

1. Create Database : This will create a new database.
	Syntax: create database <database-name>;
	
    Example : postgres=# create database person;
              CREATE DATABASE

	a) \l -> To create a list of all databases created earlier.
	b) \c -> To connect a database.
		Syntax : \c <database-name>;

        Example : 
            postgres=# \c person;
            psql (15.3 (Ubuntu 15.3-1.pgdg18.04+1), server 10.23 (Ubuntu 10.23-0ubuntu0.18.04.2))
            You are now connected to database "person" as user "postgres".


2. Drop Database : To drop the database.
	Syntax : drop database <database-name>;

    Example : 
        postgres=# drop database person;
        DROP DATABASE


**TABLES**

3. Create Table : To create a new table in existing database.
	Syntax : create table <table-name>(<column1> <data-type> , <column2> <data type> , ..);
    
    Example :
        company=# create table employee (
        company(# emp_id int primary key,
        company(# emp_name varchar not null,
        company(# gender varchar );
        CREATE TABLE

	a) \d or \dt-> This command wil list all the tables in current database.

        Example :
            company=# \dt
                    List of relations
            Schema |   Name   | Type  |  Owner   
            --------+----------+-------+----------
            public | employee | table | postgres
            (1 row)

4. Drop table : To drop the table from database.
	Syntax: drop table <table-name>

    Example : 
        company=# drop table employee;
        DROP TABLE

5. Describe table : To find the information on columns of a table.
	Syntax : \d <table-name>

    Example :
        company=# \d employee
                    Table "public.employee"
        Column  |       Type        | Collation | Nullable | Default 
        ----------+-------------------+-----------+----------+---------
        emp_id   | integer           |           | not null | 
        emp_name | character varying |           | not null | 
        gender   | character varying |           |          | 
        Indexes:
            "employee_pkey" PRIMARY KEY, btree (emp_id)

6. alter table : This command is used to change the current table structure.
    Syntax : ALTER TABLE <table-name> action;  

    a) Add a column : To add a new column in existing table.
        Syntax: alter table <table-name> add column <column-name>;

        Example :
            company=# alter table employee add column address varchar(100);
            ALTER TABLE
    b) Rename a column : To rename the column name.
        Syntax : alter table <table-name> rename column <source_name> to <destination_name>;

        Example :
            company=# alter table employee rename column emp_name to name;
            ALTER TABLE
            company=# \d employee
                                Table "public.employee"
            Column  |          Type          | Collation | Nullable | Default 
            ---------+------------------------+-----------+----------+---------
            emp_id  | integer                |           | not null | 
            name    | character varying      |           | not null | 
            gender  | character varying      |           |          | 
            address | character varying(100) |           |          | 
            Indexes:
                "employee_pkey" PRIMARY KEY, btree (emp_id)
    c) Drop a column : To delete the column from a table.
        Syntax : alter table <table-name> drop column <column-name>;

        Example :
            company=# alter table employee drop column address;
            ALTER TABLE
    d) Change column type : To change the type of column.
        Syntax : alter table <table-name> alter column type <new-type>;

        Example :
            company=# alter table employee alter column gender type char(30);
            ALTER TABLE
    e) Add constraint on column : To add the new constraint on column.
        Syntax : alter table <table-name> alter column <column-name> set <constraint>;

        Example :
            company=# alter table employee alter column gender set not null;
            ALTER TABLE
    f) Drop constraint : To remove the constraint from column in a table.
        Syntax : alter table <table-name> alter column <column-name> drop <constraint>;
 
        Example :
            company=# alter table employee alter column gender drop not null;
            ALTER TABLE
    g) Add primary key constraint : To add primary key constraint in a column.
        Syntax : alter table <table-name> add primary key <column-name>;

        Example :
            company=# alter table person add primary key (id);
            ALTER TABLE
            company=# \d person
                                Table "public.person"
            Column |         Type          | Collation | Nullable | Default 
            --------+-----------------------+-----------+----------+---------
            id     | integer               |           | not null | 
            name   | character varying(30) |           |          | 
            Indexes:
                "person_pkey" PRIMARY KEY, btree (id)

7. truncate table : The TRUNCATE TABLE command to remove all the records from a particular table.
    Syntax : truncate table <table-name>;

    Example :
        company=# truncate table person;
        TRUNCATE TABLE

8. Temporary table : This query is used to create the temporary table.
    Syntax : create temporary table <table-name>(...);

    Example:
        temporary_database=# create temporary table temp_table(fruits_name varchar,fruits_season varchar);
        CREATE TABLE
    
        a) drop temporary table : To drop the temporary table from database.
            Syntax : drop table <table-name>;
            Example :
                temporary_database=# drop table temp_table;
                DROP TABLE

        Note : If we close thse session then temporary table will automatically delete.

9. Column Aliases : Column alias is used to give a short name to the column.
    Syntax : select <column-name> as <alias-name> from <table-name>;

    Example : 
        company=# select id, name as person_name from person;
        id | person_name 
        ----+-------------
        (0 rows)
    
10. Insert Data : It is used to insert data into table.
    Syntax : insert into <table-name> (column1,...) values (data1,...);
    
    For multiple rows : 
    Syntax : insert into <table-name> (column1,...) values (data1,...),(data1,...),...;

    Example : 
        company=# insert into employee (emp_id,name,gender) values (3,'Shyam','male');
        INSERT 0 1
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
            3 | Shyam | male                          
        (3 rows)
    
11. Select query : SELECT statement is used to fetch the data from a database table, which      returns data in the form of result table.
    Syntax : select <column_name> from <table-name>;
    
    For whole table :
    Syntax : select * from <table-name>;

    Example : 
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
            3 | Shyam | male                          
        (3 rows)
    
13. Update query : The UPDATE command is used to change the present records in a table.
    Syntax : update <table-name> set <column-name>=<value> where <condition>;

    Example :
        company=# update employee SET name='Vijay' where emp_id=3;
        UPDATE 1
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
            3 | Vijay | male                          
        (3 rows)

14. Delete query : It is used to delete all existing records from a table. And the WHERE clause is used to remove the selected records or else, all the data would be eliminated.
    Syntax : delete from <table-name> where <condition>;

    For deleting all rows from table:
    Syntax : delete from <table-name>;

    Example :   
        company=# delete from employee where emp_id=3;
        DELETE 1
        company=# select * from employee;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            1 | Ram   | male                          
            2 | Kavya | female                        
        (2 rows)

** CLAUSES IN POSTGRESQL **

15. Where clause : WHERE clause is used to specify a condition while fetching the data from single table or joining with multiple tables.
    Syntax : select column1,column2 from <table-name> 
            where <Condition>

    Example :
        company=# select * from employee where emp_id=2;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            2 | Kavya | female                        
        (1 row)

16. ORDER BY clause : The ORDER BY clause permits us to sort rows returned by a SELECT condition in ascending or descending order depends on the sort expression.
    Syntax : select * from <table-name> order by <column-name> [asc|desc];

    Example :
        company=# select * from employee order by name asc;
        emp_id | name  |             gender             
        --------+-------+--------------------------------
            2 | Kavya | female                        
            1 | Ram   | male                          
        (2 rows)

17. Group By clause : GROUP BY clause is used in collaboration with the SELECT statement to group together those rows in a table that have identical data. It is also useful with aggregate functions.
    Syntax : select <column-list> from <table_name> 
            where [conditions]
            group by column1, column2....columnN;
    
    Example :
        company=# select name from employee group by name;
        name  
        -------
        Ram
        Shyam
        Kavya
        (3 rows)

18. Having clause : The having clause is used to specify a search condition for a group or an aggregate.
    Syntax : select <column1> from <table-name> where <condition> 
            group by<column-name1> having <condition>;
    
    Example:
        company=# select name,SUM(salary) from company group by name having SUM(salary)>5000;
        name  |  sum  
        -------+-------
        Paul  | 20000
        James | 10000
        (2 rows)

19. Distinct clause : It is used to delete the matching rows or data from a table and get only the unique records.
    Syntax : select distinct <column-list> from <table-name>;

    Example : 
        company=# select distinct name,salary from company;
        name  | salary 
        -------+--------
        Paul  |  20000
        James |   5000
        (2 rows)

20. Limit clause : It is used to get a subset of rows produced by a command.
    Syntax : select <column-list> from <table-name> order by <column-name> [ASC|DESC]
            LIMIT <row_count>;

    Example :
        company=# select * from company order by salary limit 3;
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        6 | C     |   8000
        (3 rows)
    
    LIMIT clause with OFFSET : We can use the OFFSET clause if we want to miss out various of rows before getting the row_count rows.
    Syntax : select <column-list> from <table-name> order by <column-name> 
            LIMIT <row-count> OFFSET <row-to-skip>;
    Example :
        company=# select * from company order by salary limit 3;
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        6 | C     |   8000
        (3 rows)

21. Fetch clause : It is used to repond a portion of rows returned by a particular statement.
    Syntax : select <column-list> from <table-name> order by <column-name>
            fetch first <row-count> row only;
    
    Fetch clause with offset : 
        Syntax : select <column-list> from <table-name> order by <column-name>
                offset <row-to-skip> rows fetch first <row-count> row only;

    Example :
        company=# select * from company order by salary fetch first 2 row only;
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        (2 rows)

** POSTGRESQL CONDITIONS **

22. AND Condition : The AND condition is used to specify the data if all the conditions separated by AND are TRUE.
    Syntax : where <condition1> and <condition2>;

    Example : 
        company=# select * from company where id>2 and salary>=9000;
        id | name | salary 
        ----+------+--------
        4 | A    |  10000
        5 | B    |   9000
        (2 rows)

23. OR Condition : The OR condition is used to return the data if any of the conditions divided by OR is TRUE.
    Syntax : where <condition1> or <condition2>;

    Example :
        company=# select * from company where id>2 or salary>8000;
        id | name  | salary 
        ----+-------+--------
        1 | Paul  |  20000
        3 | James |   5000
        4 | A     |  10000
        5 | B     |   9000
        6 | C     |   8000
        (5 rows)

24. NOT Condition : The PostgreSQL NOT condition is used with the WHERE clause to negate a condition in a command. 
    Syntax : select * from <table-name> where <column-name> not <condition> 

    Example : 
        company=# select * from company where name not in ('James','Paul');
        id | name | salary 
        ----+------+--------
        4 | A    |  10000
        5 | B    |   9000
        6 | C    |   8000
        (3 rows)

25. LIKE Condition : The Like condition is used to perform pattern matching for identifying the exact outcome.
    Percent (%) wildcard: To match any sequence of zero or more characters.
    Underscore (_) wildcard: To match any single character.
    Syntax : select * from <table-name> where <column-name> like <pattern>;

    Example :
        company=# select * from company where name like 'J%';
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        (2 rows)
    
    NOT LIKE Condition : To negate the LIKE condition.
    Syntax : select * from <table-name> where <column-name> not like <pattern>;

    Example :
        company=# select * from company where name not like 'J%';
        id | name | salary 
        ----+------+--------
        1 | Paul |  20000
        4 | A    |  10000
        5 | B    |   9000
        6 | C    |   8000
        (4 rows)

26. IN Condition : The PostgreSQL IN condition is used within the WHERE clause to get those data that matches any data in a list. The IN condition is used to reduce multiple OR conditions.
    Syntax : select * from <table-name> where <column-name> in <value1,..>;

    Example : 
        company=# select * from company where name in('Paul','James') order by salary;
        id | name  | salary 
        ----+-------+--------
        2 | James |   5000
        3 | James |   5000
        1 | Paul  |  20000
        (3 rows)

27. NOT IN Condition : The PostgreSQL NOT IN condition is used with WHERE clause to fetch data from a table where defined condition contradicts the PostgreSQL IN condition.
    Syntax : select * from <table-name> where <column-name> not in <value1,...>;

    Example : 
        company=# select * from company where name not in('Paul','James') order by salary;
        id | name | salary 
        ----+------+--------
        6 | C    |   8000
        5 | B    |   9000
        4 | A    |  10000
        (3 rows)

28. BETWEEN Condition : The PostgreSQL Between condition is used to define how to retrieve values from an expression within a specific range.
    Syntax : select * from <table-name> where <column-name> between <value1> and <value2>;

    Example :
        company=# select * from company where salary between 8000 and 11000;
        id | name | salary 
        ----+------+--------
        4 | A    |  10000
        5 | B    |   9000
        6 | C    |   8000
        (3 rows)

29. EXISTS Condition : The EXISTS condition is used to check for the presence of any data in a subquery, and returns true if the subquery returns several records.
    Syntax : select * from <table-name> where exists <subquery>;

    Example : 
        company=# select * from company where exists (select name from employee where employee.id=company.id and gender='male');
        id | name  | salary 
        ----+-------+--------
        1 | Paul  |  20000
        3 | James |   5000
        4 | A     |  10000
        (3 rows)

** POSTGRESQL VIEWS **

30. Views : A view can contain all rows of a table or selected rows from one or more tables. A view can be created from one or many tables, which depends on the written PostgreSQL query to create a view.
    Syntax : create view <view-name> as select <column-list> from <table-name>;

    Example : 
        company=# create view company_view as select id,name from company;
        CREATE VIEW

        a) \dv : To list all the views.
            Example :
                company=# \dv
                            List of relations
                Schema |     Name     | Type |  Owner   
                --------+--------------+------+----------
                public | company_view | view | postgres
                (1 row)

        b) drop view : To drop a view from database;
            Example :
                company=# drop view company_view;
                DROP VIEW
        
        c) temp view : To create temporary view.
            Example :
                company=# create temporary view company_view as select id,name from company;
                CREATE VIEW

** POSTGRESQL CONSTRAINTS **

31. Primary key : A primary key does not hold any null value. And for this, we can also say that the primary key is collecting the unique and not-null constraint of a table. If the column has a primary key constraint, then it cannot be null or empty.
    Example:
        company=# create table person(id serial primary key,name varchar,gender varchar);
        CREATE TABLE
    
32. Unique : It is used to make sure that all values in a column of a table are exclusive. 
    Example:
        company=# alter table person add column email varchar(50) unique;
        ALTER TABLE
        company=# \d person
                                        Table "public.person"
        Column |         Type          | Collation | Nullable |              Default               
        --------+-----------------------+-----------+----------+------------------------------------
        id     | integer               |           | not null | nextval('person_id_seq'::regclass)
        name   | character varying     |           |          | 
        gender | character varying     |           |          | 
        email  | character varying(50) |           |          | 
        Indexes:
            "person_pkey" PRIMARY KEY, btree (id)
            "person_email_key" UNIQUE CONSTRAINT, btree (email)

33. Check constraint :  It is used to make sure that all values in a column or a field of a table satisfy particular situations.
    Example : 
        company=# create table worker (worker_id serial primary key,
        company(# worker_name varchar(25), age integer check(age>18));
        CREATE TABLE

34. Not Null : It is used to make sure that the values of a column are not null.
    Example :
        company=# alter table worker alter column worker_name set not null;
        ALTER TABLE

35. Foreign Key : The foreign key is also known as the referencing key, and it matches the primary key field from another table, which implies that the foreign key field in one table refers to the other table's primary key field.
    Example : 
        company=# create table department(dept_id integer primary key,emp_id int,
        foreign key(emp_id)  
        references employee(emp_id));
        CREATE TABLE
        company=# \d employee
                            Table "public.employee"
        Column  |         Type          | Collation | Nullable | Default 
        ----------+-----------------------+-----------+----------+---------
        emp_id   | integer               |           | not null | 
        emp_name | character varying(50) |           | not null | 
        Indexes:
            "employee_pkey" PRIMARY KEY, btree (emp_id)
        Referenced by:
            TABLE "department" CONSTRAINT "department_emp_id_fkey" FOREIGN KEY (emp_id) REFERENCES employee(emp_id)
    
    Drop Foreign Key :
        Example :
            company=# alter table department drop constraint department_emp_id_fkey ;
            ALTER TABLE
            company=# \d department
                        Table "public.department"
            Column  |  Type   | Collation | Nullable | Default 
            ---------+---------+-----------+----------+---------
            dept_id | integer |           | not null | 
            emp_id  | integer |           |          | 
            Indexes:
                "department_pkey" PRIMARY KEY, btree (dept_id)

** JOINS IN POSTGRESQL **

36. Inner Join : The PostgreSQL Inner Join is used to return only those records from the tables, which are equivalent to the defined condition and hides other rows and columns. In PostgreSQL, it as a default Join, therefore it is not compulsory to use the Inner Join keyword with the query.
    Syntax : select <column-list> from <table1> inner join <table2> on 
            table1.column_name=table2.column_name;
    
    Example :
        company=# select emp_fname,emp_lname,location,dept_name from employee inner join department on employee.emp_id=department.emp_id;
        emp_fname | emp_lname |  location   |    dept_name    
        -----------+-----------+-------------+-----------------
        John      | Smith     | New York    | ACCOUNTING
        Mia       | Clark     | Florida     | SALES
        Noah      | Rodriguez | Chicago     | RESEARCH
        Ava       | Gracia    | Houston     | OPERATIONS
        James     | Luther    | Los Angeles | HUMAN RESOURCES
 
 37. Left Join or Left Outer Join : The PostgreSQL LEFT JOIN or Left Outer Join is used to return all rows from the left table and rows from the other table where the join condition is fulfilled defined in the ON condition. And if there are no corresponding records found from the right table, it will return null.
    Syntax : select <column-list> from <table1> left join <table2> on 
            table1.column_name=table2.column_name;
    
    Example : 
        company=# select employee.emp_id,emp_fname,emp_lname,dept_name,location from employee left join department on employee.emp_id=department.emp_id;
        emp_id | emp_fname | emp_lname  |    dept_name    |  location   
        --------+-----------+------------+-----------------+-------------
            1 | John      | Smith      | ACCOUNTING      | New York
            2 | Mia       | Clark      | SALES           | Florida
            3 | Noah      | Rodriguez  | RESEARCH        | Chicago
            4 | Ava       | Gracia     | OPERATIONS      | Houston
            5 | James     | Luther     | HUMAN RESOURCES | Los Angeles
            6 | Paul      | Williamson |                 | Delhi
            7 | James     | Smith      |                 | Mumbai
        (7 rows)

38. Right Join or Right Outer Join : The PostgreSQL Right JOIN or Right Outer Join is used to return all rows from the right table, and rows from the other table where the join condition is fulfilled defined in the ON condition. And if there are no corresponding records found from the Left table, it will return null values.
    Syntax : select <column-list> from <table1> right join <table2> on 
            table1.column_name=table2.column_name;
    
    Example :
        company=# select employee.emp_id,emp_fname,emp_lname,dept_name,location from employee right join department on employee.emp_id=department.emp_id;
        emp_id | emp_fname | emp_lname |    dept_name    |  location   
        --------+-----------+-----------+-----------------+-------------
            1 | John      | Smith     | ACCOUNTING      | New York
            2 | Mia       | Clark     | SALES           | Florida
            3 | Noah      | Rodriguez | RESEARCH        | Chicago
            4 | Ava       | Gracia    | OPERATIONS      | Houston
            5 | James     | Luther    | HUMAN RESOURCES | Los Angeles
                |           |           | Finance         | 
                |           |           | HR              | 
        (7 rows)

39. Full Join or Full Outer Join : The PostgreSQL Full Join or Full Outer Join is used to return all records when there is a match in the left table or right table records. 
    Syntax : select <column-list> from <table1> full join <table2> on 
            table1.column_name=table2.column_name;

    Example :
        company=# select employee.emp_id,emp_fname,emp_lname,dept_name,location from employee full join department on employee.emp_id=department.emp_id;
        emp_id | emp_fname | emp_lname |    dept_name    |  location   
        --------+-----------+-----------+-----------------+-------------
            1 | John      | Smith     | ACCOUNTING      | New York
            2 | Mia       | Clark     | SALES           | Florida
            3 | Noah      | Rodriguez | RESEARCH        | Chicago
            4 | Ava       | Gracia    | OPERATIONS      | Houston
            5 | James     | Luther    | HUMAN RESOURCES | Los Angeles
                |           |           | Finance         | 
                |           |           | HR              | 
        (7 rows)

40. Cross Join : The PostgreSQL Cross Join is used to combine all possibilities of the multiple tables and returns the output, which contain each row from all the selected tables.
    Syntax : select <column-list> from <table1> cross join <table2>;

    Example :
        company=# select * from employee cross join department;
        emp_id | emp_fname | emp_lname |  location   | emp_id | dept_id |    dept_name    
        --------+-----------+-----------+-------------+--------+---------+-----------------
            1 | John      | Smith     | New York    |      1 |       1 | ACCOUNTING
            2 | Mia       | Clark     | Florida     |      1 |       1 | ACCOUNTING
            3 | Noah      | Rodriguez | Chicago     |      1 |       1 | ACCOUNTING
            4 | Ava       | Gracia    | Houston     |      1 |       1 | ACCOUNTING
            5 | James     | Luther    | Los Angeles |      1 |       1 | ACCOUNTING
            1 | John      | Smith     | New York    |      2 |       2 | SALES
            2 | Mia       | Clark     | Florida     |      2 |       2 | SALES
            3 | Noah      | Rodriguez | Chicago     |      2 |       2 | SALES
            4 | Ava       | Gracia    | Houston     |      2 |       2 | SALES
            5 | James     | Luther    | Los Angeles |      2 |       2 | SALES
            1 | John      | Smith     | New York    |      3 |       3 | RESEARCH
            2 | Mia       | Clark     | Florida     |      3 |       3 | RESEARCH
            3 | Noah      | Rodriguez | Chicago     |      3 |       3 | RESEARCH
            4 | Ava       | Gracia    | Houston     |      3 |       3 | RESEARCH
            5 | James     | Luther    | Los Angeles |      3 |       3 | RESEARCH
            1 | John      | Smith     | New York    |      4 |       4 | OPERATIONS
            2 | Mia       | Clark     | Florida     |      4 |       4 | OPERATIONS
            3 | Noah      | Rodriguez | Chicago     |      4 |       4 | OPERATIONS
            4 | Ava       | Gracia    | Houston     |      4 |       4 | OPERATIONS
            5 | James     | Luther    | Los Angeles |      4 |       4 | OPERATIONS
            1 | John      | Smith     | New York    |      5 |       5 | HUMAN RESOURCES
            2 | Mia       | Clark     | Florida     |      5 |       5 | HUMAN RESOURCES
            3 | Noah      | Rodriguez | Chicago     |      5 |       5 | HUMAN RESOURCES
            4 | Ava       | Gracia    | Houston     |      5 |       5 | HUMAN RESOURCES
            5 | James     | Luther    | Los Angeles |      5 |       5 | HUMAN RESOURCES
            1 | John      | Smith     | New York    |      6 |       6 | Finance
            2 | Mia       | Clark     | Florida     |      6 |       6 | Finance
            3 | Noah      | Rodriguez | Chicago     |      6 |       6 | Finance
            4 | Ava       | Gracia    | Houston     |      6 |       6 | Finance
            5 | James     | Luther    | Los Angeles |      6 |       6 | Finance
            1 | John      | Smith     | New York    |      7 |       7 | HR
            2 | Mia       | Clark     | Florida     |      7 |       7 | HR
            3 | Noah      | Rodriguez | Chicago     |      7 |       7 | HR
            4 | Ava       | Gracia    | Houston     |      7 |       7 | HR
            5 | James     | Luther    | Los Angeles |      7 |       7 | HR
        (35 rows)

** POSTGRESQL TRIGGERS **

41. Create Trigger : It is used to create new trigger.
    
    Steps for creating a trigger :
    a) Creating a new function :
        Syntax : create or replace function <function-name>()
                returns trigger
                language plpgsql
                as
                $$  
                begin
                    <trigger-logic>
                end;
                $$;
    b) Creating a new trigger :
        Syntax : create trigger trigger_name
                [before|after] [insert|delete|update]
                on <table-name>
                for each row
                execute procedure <trigger-function>();

    Example : 
        company=# create or replace function first_name_changes()
        company-# returns trigger
        company-# language plpgsql
        company-# as
        company-# $$
        company$# begin
        company$# if new.fname<>old.fname then
        company$# insert into client_audits(client_id ,fname,changed_on)
        company$# values(old.id,old.fname,now());
        company$# end if;
        company$# return new ;
        company$# end;
        company$# $$;
        CREATE FUNCTION
        
        company=# create trigger fname_changes
        company-# before update on clients
        company-# for each row 
        company-# execute procedure first_name_changes();
        CREATE TRIGGER

        company=# INSERT INTO Clients (id,fname, lname)  
        VALUES (1,'Mike', 'Ross'),  
        (2,'Olivia', 'Smith');  
        INSERT 0 2
        company=# update clients set fname='Alivia' where id=2;
        UPDATE 1

        company=# select * from clients;
        id | fname  | lname 
        ----+--------+-------
        1 | Mike   | Ross
        2 | Alivia | Smith
        (2 rows)

        company=# select * from client_audits;
        id | client_id | fname  |         changed_on         
        ----+-----------+--------+----------------------------
            |         2 | Olivia | 2023-10-16 11:23:39.751707
        (1 row)

42. Drop Trigger : To drop a trigger.
    Syntax : drop trigger <trigger-name> on <table-name>;

    Example :
        company=# drop trigger fname_changes on clients;
        DROP TRIGGER

43. Alter Trigger :  The Alter Trigger command, which is used to rename the existing trigger.
    Syntax : alter trigger <trigger-name>
            on <table-name>
            rename to <new-trigger-name>;

    Example :
        company=# alter trigger fname_changes on clients rename to fnameChanges;
        ALTER TRIGGER
 
 44. View trigger : To view all the triggers generated on the table.
    Syntax : \dS <table-name>
    
    Example :
        company=# \dS clients;
                            Table "public.clients"
        Column |         Type          | Collation | Nullable | Default 
        --------+-----------------------+-----------+----------+---------
        id     | integer               |           | not null | 
        fname  | character varying(20) |           |          | 
        lname  | character varying(20) |           |          | 
        Indexes:
            "clients_pkey" PRIMARY KEY, btree (id)
        Triggers:
            fnamechanges BEFORE UPDATE ON clients FOR EACH ROW EXECUTE PROCEDURE first_name_changes()

45. Disable trigger : To disable the trigger from table.
    Syntax : alter table <table-name>
            disable trigger <trigger-name>|<ALL>;
    
    Example : 
        company=# alter table clients disable trigger after_charge_changes;
        ALTER TABLE
        company=# \dS clients;
                            Table "public.clients"
        Column |         Type          | Collation | Nullable | Default 
        --------+-----------------------+-----------+----------+---------
        id     | integer               |           | not null | 
        fname  | character varying(20) |           |          | 
        lname  | character varying(20) |           |          | 
        charge | integer               |           |          | 
        Indexes:
            "clients_pkey" PRIMARY KEY, btree (id)
        Triggers:
            fname_changes AFTER UPDATE ON clients FOR EACH ROW EXECUTE PROCEDURE first_name_changes()
        Disabled user triggers:
            after_charge_changes AFTER UPDATE ON clients FOR EACH ROW EXECUTE PROCEDURE charge_changes()
    
    For diable all triggers :
    Example : 
        company=# alter table clients disable trigger all;
        ALTER TABLE
        company=# \dS clients;
                            Table "public.clients"
        Column |         Type          | Collation | Nullable | Default 
        --------+-----------------------+-----------+----------+---------
        id     | integer               |           | not null | 
        fname  | character varying(20) |           |          | 
        lname  | character varying(20) |           |          | 
        charge | integer               |           |          | 
        Indexes:
            "clients_pkey" PRIMARY KEY, btree (id)
        Disabled user triggers:
            after_charge_changes AFTER UPDATE ON clients FOR EACH ROW EXECUTE PROCEDURE charge_changes()
            fname_changes AFTER UPDATE ON clients FOR EACH ROW EXECUTE PROCEDURE first_name_changes()

46. Enable trigger : To enable the trigger from diable mode.
    Syntax : alter table <table-name>
            enable trigger [trigger-name>|All];
    
    Example : 
        company=# alter table clients enable trigger after_charge_changes;
        ALTER TABLE
        company=# \dS clients;
                            Table "public.clients"
        Column |         Type          | Collation | Nullable | Default 
        --------+-----------------------+-----------+----------+---------
        id     | integer               |           | not null | 
        fname  | character varying(20) |           |          | 
        lname  | character varying(20) |           |          | 
        charge | integer               |           |          | 
        Indexes:
            "clients_pkey" PRIMARY KEY, btree (id)
        Triggers:
            after_charge_changes AFTER UPDATE ON clients FOR EACH ROW EXECUTE PROCEDURE charge_changes()
        Disabled user triggers:
            fname_changes AFTER UPDATE ON clients FOR EACH ROW EXECUTE PROCEDURE first_name_changes()